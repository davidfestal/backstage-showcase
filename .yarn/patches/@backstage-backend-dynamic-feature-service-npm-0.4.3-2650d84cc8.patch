diff --git a/dist/features/features.cjs.js b/dist/features/features.cjs.js
index debb6ce817c7aa0111a3cbc20edeee815ad59759..cea4f6fde4c4c57793db5f9732d6810bdd517256 100644
--- a/dist/features/features.cjs.js
+++ b/dist/features/features.cjs.js
@@ -1,11 +1,11 @@
 'use strict';
 
 var backendPluginApi = require('@backstage/backend-plugin-api');
+var pluginManager = require('../manager/plugin-manager.cjs.js');
+var pluginScanner = require('../scanner/plugin-scanner.cjs.js');
 var schemas = require('../schemas/schemas.cjs.js');
 var frontend = require('../schemas/frontend.cjs.js');
 var rootLogger = require('../schemas/rootLogger.cjs.js');
-var pluginManager = require('../manager/plugin-manager.cjs.js');
-var pluginScanner = require('../scanner/plugin-scanner.cjs.js');
 
 const dynamicPluginsFeatureLoaderWithOptions = (options) => backendPluginApi.createBackendFeatureLoader({
   deps: {
@@ -13,13 +13,17 @@ const dynamicPluginsFeatureLoaderWithOptions = (options) => backendPluginApi.cre
   },
   *loader({ config }) {
     const dynamicPluginsEnabled = config.has(pluginScanner.configKey);
+    let rootLoggerOptions = {};
+    if (options?.logger) {
+      rootLoggerOptions = options.logger(config);
+    }
     yield* [
       schemas.dynamicPluginsSchemasServiceFactory(options),
       pluginManager.dynamicPluginsServiceFactory(options)
     ];
     if (dynamicPluginsEnabled) {
       yield* [
-        rootLogger.dynamicPluginsRootLoggerServiceFactory(options),
+        rootLogger.dynamicPluginsRootLoggerServiceFactory(rootLoggerOptions),
         frontend.dynamicPluginsFrontendSchemas,
         pluginManager.dynamicPluginsFeatureDiscoveryLoader
       ];
diff --git a/dist/features/features.cjs.js.map b/dist/features/features.cjs.js.map
index 4c36851870462037a9c505eb5b20a7085499c734..9db90b1fd34484a06aaaa1137322f22f4a9e82c2 100644
--- a/dist/features/features.cjs.js.map
+++ b/dist/features/features.cjs.js.map
@@ -1 +1 @@
-{"version":3,"file":"features.cjs.js","sources":["../../src/features/features.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  coreServices,\n  createBackendFeatureLoader,\n} from '@backstage/backend-plugin-api';\nimport {\n  DynamicPluginsSchemasOptions,\n  dynamicPluginsFrontendSchemas,\n  dynamicPluginsRootLoggerServiceFactory,\n  dynamicPluginsSchemasServiceFactory,\n} from '../schemas';\nimport {\n  DynamicPluginsFactoryOptions,\n  dynamicPluginsFeatureDiscoveryLoader,\n  dynamicPluginsServiceFactory,\n} from '../manager';\nimport { DynamicPluginsRootLoggerFactoryOptions } from '../schemas';\nimport { configKey } from '../scanner/plugin-scanner';\n\n/**\n * @public\n */\nexport type DynamicPluginsFeatureLoaderOptions = DynamicPluginsFactoryOptions &\n  DynamicPluginsSchemasOptions &\n  DynamicPluginsRootLoggerFactoryOptions;\n\nconst dynamicPluginsFeatureLoaderWithOptions = (\n  options?: DynamicPluginsFeatureLoaderOptions,\n) =>\n  createBackendFeatureLoader({\n    deps: {\n      config: coreServices.rootConfig,\n    },\n    *loader({ config }) {\n      const dynamicPluginsEnabled = config.has(configKey);\n\n      yield* [\n        dynamicPluginsSchemasServiceFactory(options),\n        dynamicPluginsServiceFactory(options),\n      ];\n      if (dynamicPluginsEnabled) {\n        yield* [\n          dynamicPluginsRootLoggerServiceFactory(options),\n          dynamicPluginsFrontendSchemas,\n          dynamicPluginsFeatureDiscoveryLoader,\n        ];\n      }\n    },\n  });\n\n/**\n * A backend feature loader that fully enable backend dynamic plugins.\n * More precisely it:\n * - adds the dynamic plugins root service (typically depended upon by plugins),\n * - adds additional required features to allow supporting dynamic plugins config schemas\n *   in the frontend application and the backend root logger,\n * - uses the dynamic plugins service to discover and expose dynamic plugins as features.\n *\n * @public\n *\n * @example\n * Using the `dynamicPluginsFeatureLoader` loader in a backend instance:\n * ```ts\n * //...\n * import { createBackend } from '@backstage/backend-defaults';\n * import { dynamicPluginsFeatureLoader } from '@backstage/backend-dynamic-feature-service';\n *\n * const backend = createBackend();\n * backend.add(dynamicPluginsFeatureLoader);\n * //...\n * backend.start();\n * ```\n *\n * @example\n * Passing options to the `dynamicPluginsFeatureLoader` loader in a backend instance:\n * ```ts\n * //...\n * import { createBackend } from '@backstage/backend-defaults';\n * import { dynamicPluginsFeatureLoader } from '@backstage/backend-dynamic-feature-service';\n * import { myCustomModuleLoader } from './myCustomModuleLoader';\n * import { myCustomSchemaLocator } from './myCustomSchemaLocator';\n *\n * const backend = createBackend();\n * backend.add(dynamicPluginsFeatureLoader({\n *   moduleLoader: myCustomModuleLoader,\n *   schemaLocator: myCustomSchemaLocator,\n *\n * }));\n * //...\n * backend.start();\n * ```\n */\nexport const dynamicPluginsFeatureLoader = Object.assign(\n  dynamicPluginsFeatureLoaderWithOptions,\n  dynamicPluginsFeatureLoaderWithOptions(),\n);\n"],"names":["createBackendFeatureLoader","coreServices","configKey","dynamicPluginsSchemasServiceFactory","dynamicPluginsServiceFactory","dynamicPluginsRootLoggerServiceFactory","dynamicPluginsFrontendSchemas","dynamicPluginsFeatureDiscoveryLoader"],"mappings":";;;;;;;;;AAyCA,MAAM,sCAAA,GAAyC,CAC7C,OAAA,KAEAA,2CAA2B,CAAA;AAAA,EACzB,IAAM,EAAA;AAAA,IACJ,QAAQC,6BAAa,CAAA,UAAA;AAAA,GACvB;AAAA,EACA,CAAC,MAAA,CAAO,EAAE,MAAA,EAAU,EAAA;AAClB,IAAM,MAAA,qBAAA,GAAwB,MAAO,CAAA,GAAA,CAAIC,uBAAS,CAAA,CAAA;AAElD,IAAO,OAAA;AAAA,MACLC,4CAAoC,OAAO,CAAA;AAAA,MAC3CC,2CAA6B,OAAO,CAAA;AAAA,KACtC,CAAA;AACA,IAAA,IAAI,qBAAuB,EAAA;AACzB,MAAO,OAAA;AAAA,QACLC,kDAAuC,OAAO,CAAA;AAAA,QAC9CC,sCAAA;AAAA,QACAC,kDAAA;AAAA,OACF,CAAA;AAAA,KACF;AAAA,GACF;AACF,CAAC,CAAA,CAAA;AA4CI,MAAM,8BAA8B,MAAO,CAAA,MAAA;AAAA,EAChD,sCAAA;AAAA,EACA,sCAAuC,EAAA;AACzC;;;;"}
\ No newline at end of file
+{"version":3,"file":"features.cjs.js","sources":["../../src/features/features.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  coreServices,\n  createBackendFeatureLoader,\n} from '@backstage/backend-plugin-api';\nimport type { Config } from '@backstage/config';\nimport {\n  DynamicPluginsFactoryOptions,\n  dynamicPluginsFeatureDiscoveryLoader,\n  dynamicPluginsServiceFactory,\n} from '../manager';\nimport { configKey } from '../scanner/plugin-scanner';\nimport {\n  DynamicPluginsRootLoggerFactoryOptions,\n  DynamicPluginsSchemasOptions,\n  dynamicPluginsFrontendSchemas,\n  dynamicPluginsRootLoggerServiceFactory,\n  dynamicPluginsSchemasServiceFactory,\n} from '../schemas';\n\n/**\n * @public\n */\nexport type DynamicPluginsFeatureLoaderOptions = DynamicPluginsFactoryOptions &\n  DynamicPluginsSchemasOptions & {\n    logger?: (config?: Config) => DynamicPluginsRootLoggerFactoryOptions;\n  };\n\nconst dynamicPluginsFeatureLoaderWithOptions = (\n  options?: DynamicPluginsFeatureLoaderOptions,\n) =>\n  createBackendFeatureLoader({\n    deps: {\n      config: coreServices.rootConfig,\n    },\n    *loader({ config }) {\n      const dynamicPluginsEnabled = config.has(configKey);\n\n      let rootLoggerOptions: DynamicPluginsRootLoggerFactoryOptions = {};\n      if (options?.logger) {\n        rootLoggerOptions = options.logger(config);\n      }\n\n      yield* [\n        dynamicPluginsSchemasServiceFactory(options),\n        dynamicPluginsServiceFactory(options),\n      ];\n      if (dynamicPluginsEnabled) {\n        yield* [\n          dynamicPluginsRootLoggerServiceFactory(rootLoggerOptions),\n          dynamicPluginsFrontendSchemas,\n          dynamicPluginsFeatureDiscoveryLoader,\n        ];\n      }\n    },\n  });\n\n/**\n * A backend feature loader that fully enable backend dynamic plugins.\n * More precisely it:\n * - adds the dynamic plugins root service (typically depended upon by plugins),\n * - adds additional required features to allow supporting dynamic plugins config schemas\n *   in the frontend application and the backend root logger,\n * - uses the dynamic plugins service to discover and expose dynamic plugins as features.\n *\n * @public\n *\n * @example\n * Using the `dynamicPluginsFeatureLoader` loader in a backend instance:\n * ```ts\n * //...\n * import { createBackend } from '@backstage/backend-defaults';\n * import { dynamicPluginsFeatureLoader } from '@backstage/backend-dynamic-feature-service';\n *\n * const backend = createBackend();\n * backend.add(dynamicPluginsFeatureLoader);\n * //...\n * backend.start();\n * ```\n *\n * @example\n * Passing options to the `dynamicPluginsFeatureLoader` loader in a backend instance:\n * ```ts\n * //...\n * import { createBackend } from '@backstage/backend-defaults';\n * import { dynamicPluginsFeatureLoader } from '@backstage/backend-dynamic-feature-service';\n * import { myCustomModuleLoader } from './myCustomModuleLoader';\n * import { myCustomSchemaLocator } from './myCustomSchemaLocator';\n * import { myConfiguredLoggerOptions } from './myConfiguredLoggerOptions';\n *\n * const backend = createBackend();\n * backend.add(dynamicPluginsFeatureLoader({\n *   moduleLoader: myCustomModuleLoader,\n *   schemaLocator: myCustomSchemaLocator,\n *   logger: (config) => myConfiguredLoggerOptions(config),\n * }));\n * //...\n * backend.start();\n * ```\n */\nexport const dynamicPluginsFeatureLoader = Object.assign(\n  dynamicPluginsFeatureLoaderWithOptions,\n  dynamicPluginsFeatureLoaderWithOptions(),\n);\n"],"names":["createBackendFeatureLoader","coreServices","configKey","dynamicPluginsSchemasServiceFactory","dynamicPluginsServiceFactory","dynamicPluginsRootLoggerServiceFactory","dynamicPluginsFrontendSchemas","dynamicPluginsFeatureDiscoveryLoader"],"mappings":";;;;;;;;;AA2CA,MAAM,sCAAA,GAAyC,CAC7C,OAAA,KAEAA,2CAA2B,CAAA;AAAA,EACzB,IAAM,EAAA;AAAA,IACJ,QAAQC,6BAAa,CAAA,UAAA;AAAA,GACvB;AAAA,EACA,CAAC,MAAA,CAAO,EAAE,MAAA,EAAU,EAAA;AAClB,IAAM,MAAA,qBAAA,GAAwB,MAAO,CAAA,GAAA,CAAIC,uBAAS,CAAA,CAAA;AAElD,IAAA,IAAI,oBAA4D,EAAC,CAAA;AACjE,IAAA,IAAI,SAAS,MAAQ,EAAA;AACnB,MAAoB,iBAAA,GAAA,OAAA,CAAQ,OAAO,MAAM,CAAA,CAAA;AAAA,KAC3C;AAEA,IAAO,OAAA;AAAA,MACLC,4CAAoC,OAAO,CAAA;AAAA,MAC3CC,2CAA6B,OAAO,CAAA;AAAA,KACtC,CAAA;AACA,IAAA,IAAI,qBAAuB,EAAA;AACzB,MAAO,OAAA;AAAA,QACLC,kDAAuC,iBAAiB,CAAA;AAAA,QACxDC,sCAAA;AAAA,QACAC,kDAAA;AAAA,OACF,CAAA;AAAA,KACF;AAAA,GACF;AACF,CAAC,CAAA,CAAA;AA6CI,MAAM,8BAA8B,MAAO,CAAA,MAAA;AAAA,EAChD,sCAAA;AAAA,EACA,sCAAuC,EAAA;AACzC;;;;"}
\ No newline at end of file
diff --git a/dist/index.cjs.js b/dist/index.cjs.js
index 0aabb1fd55bc7410d062fab7b3f323d6e0e57c0a..73c1749f590281b9667d8df76af86e7a424bc1a9 100644
--- a/dist/index.cjs.js
+++ b/dist/index.cjs.js
@@ -1,5 +1,6 @@
 'use strict';
 
+var CommonJSModuleLoader = require('./loader/CommonJSModuleLoader.cjs.js');
 var types = require('./manager/types.cjs.js');
 var pluginManager = require('./manager/plugin-manager.cjs.js');
 var schemas = require('./schemas/schemas.cjs.js');
@@ -9,6 +10,7 @@ var features = require('./features/features.cjs.js');
 
 
 
+exports.CommonJSModuleLoader = CommonJSModuleLoader.CommonJSModuleLoader;
 exports.isBackendDynamicPluginInstaller = types.isBackendDynamicPluginInstaller;
 exports.DynamicPluginManager = pluginManager.DynamicPluginManager;
 exports.dynamicPluginsFeatureDiscoveryLoader = pluginManager.dynamicPluginsFeatureDiscoveryLoader;
diff --git a/dist/index.cjs.js.map b/dist/index.cjs.js.map
index 2ea62d597895b73a918ad0d1d6aa83f11ea85be4..5e1b359592b8730d89e6209487d4d305d43affee 100644
--- a/dist/index.cjs.js.map
+++ b/dist/index.cjs.js.map
@@ -1 +1 @@
-{"version":3,"file":"index.cjs.js","sources":[],"sourcesContent":[],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;"}
\ No newline at end of file
+{"version":3,"file":"index.cjs.js","sources":[],"sourcesContent":[],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;"}
\ No newline at end of file
diff --git a/dist/index.d.ts b/dist/index.d.ts
index 212ed98b995d33e38f428a108805a6a791bd948f..afea68232d070c81c20c7ab70b6850c481312c41 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -1,4 +1,6 @@
 import { BackstagePackageJson, PackageRole, PackagePlatform } from '@backstage/cli-node';
+import * as _backstage_backend_plugin_api from '@backstage/backend-plugin-api';
+import { LoggerService, UrlReaderService, SchedulerService, BackendFeature, SchedulerServiceTaskRunner } from '@backstage/backend-plugin-api';
 import { Logger } from 'winston';
 import { Config } from '@backstage/config';
 import { PluginCacheManager, PluginDatabaseManager, PluginEndpointDiscovery, TokenManager } from '@backstage/backend-common';
@@ -6,8 +8,6 @@ import { Router } from 'express';
 import { IdentityApi } from '@backstage/plugin-auth-node';
 import { PermissionEvaluator } from '@backstage/plugin-permission-common';
 import { EventBroker, EventsService, HttpPostIngressOptions } from '@backstage/plugin-events-node';
-import * as _backstage_backend_plugin_api from '@backstage/backend-plugin-api';
-import { UrlReaderService, SchedulerService, BackendFeature, SchedulerServiceTaskRunner, LoggerService } from '@backstage/backend-plugin-api';
 import { CatalogBuilder } from '@backstage/plugin-catalog-backend';
 import { TemplateAction } from '@backstage/plugin-scaffolder-node';
 import { IndexBuilder } from '@backstage/plugin-search-backend-node';
@@ -17,20 +17,13 @@ import { FeatureDiscoveryService } from '@backstage/backend-plugin-api/alpha';
 import { ConfigSchema } from '@backstage/config-loader';
 import { WinstonLoggerOptions } from '@backstage/backend-defaults/rootLogger';
 
-/**
- * @public
- */
-interface ModuleLoader {
-    bootstrap(backstageRoot: string, dynamicPluginPaths: string[]): Promise<void>;
-    load(id: string): Promise<any>;
-}
-
 /**
  * @public
  */
 interface ScannedPluginPackage {
     location: URL;
     manifest: ScannedPluginManifest;
+    alphaManifest?: BackstagePackageJson;
 }
 /**
  * @public
@@ -41,6 +34,33 @@ type ScannedPluginManifest = BackstagePackageJson & Required<Pick<BackstagePacka
     };
 };
 
+/**
+ * @public
+ */
+interface ModuleLoader {
+    bootstrap(backstageRoot: string, dynamicPluginPaths: string[], scannedPluginManifests?: Map<string, ScannedPluginManifest>): Promise<void>;
+    load(id: string): Promise<any>;
+}
+
+/**
+ * @public
+ */
+type CommonJSModuleLoaderOptions = {
+    logger: LoggerService;
+    dynamicPluginPackageNameSuffixes?: String[];
+    customResolveDynamicPackage?: (logger: LoggerService, searchedPackageName: string, scannedPluginManifests: Map<string, ScannedPluginManifest>) => string | undefined;
+};
+/**
+ * @public
+ */
+declare class CommonJSModuleLoader implements ModuleLoader {
+    readonly options: CommonJSModuleLoaderOptions;
+    private module;
+    constructor(options: CommonJSModuleLoaderOptions);
+    bootstrap(backstageRoot: string, dynamicPluginsPaths: string[], scannedPluginManifests: Map<string, ScannedPluginManifest>): Promise<void>;
+    load(packagePath: string): Promise<any>;
+}
+
 /**
  * @public
  *
@@ -276,7 +296,9 @@ declare const dynamicPluginsRootLoggerServiceFactory: ((options?: DynamicPlugins
 /**
  * @public
  */
-type DynamicPluginsFeatureLoaderOptions = DynamicPluginsFactoryOptions & DynamicPluginsSchemasOptions & DynamicPluginsRootLoggerFactoryOptions;
+type DynamicPluginsFeatureLoaderOptions = DynamicPluginsFactoryOptions & DynamicPluginsSchemasOptions & {
+    logger?: (config?: Config) => DynamicPluginsRootLoggerFactoryOptions;
+};
 /**
  * A backend feature loader that fully enable backend dynamic plugins.
  * More precisely it:
@@ -308,12 +330,13 @@ type DynamicPluginsFeatureLoaderOptions = DynamicPluginsFactoryOptions & Dynamic
  * import { dynamicPluginsFeatureLoader } from '@backstage/backend-dynamic-feature-service';
  * import { myCustomModuleLoader } from './myCustomModuleLoader';
  * import { myCustomSchemaLocator } from './myCustomSchemaLocator';
+ * import { myConfiguredLoggerOptions } from './myConfiguredLoggerOptions';
  *
  * const backend = createBackend();
  * backend.add(dynamicPluginsFeatureLoader({
  *   moduleLoader: myCustomModuleLoader,
  *   schemaLocator: myCustomSchemaLocator,
- *
+ *   logger: (config) => myConfiguredLoggerOptions(config),
  * }));
  * //...
  * backend.start();
@@ -321,4 +344,4 @@ type DynamicPluginsFeatureLoaderOptions = DynamicPluginsFactoryOptions & Dynamic
  */
 declare const dynamicPluginsFeatureLoader: ((options?: DynamicPluginsFeatureLoaderOptions) => _backstage_backend_plugin_api.BackendFeature) & _backstage_backend_plugin_api.BackendFeature;
 
-export { type BackendDynamicPlugin, type BackendDynamicPluginInstaller, type BackendPluginProvider, type BaseDynamicPlugin, type DynamicPlugin, DynamicPluginManager, type DynamicPluginManagerOptions, type DynamicPluginProvider, type DynamicPluginsFactoryOptions, type DynamicPluginsFeatureLoaderOptions, type DynamicPluginsRootLoggerFactoryOptions, type DynamicPluginsSchemasOptions, type DynamicPluginsSchemasService, type FrontendDynamicPlugin, type FrontendPluginProvider, type LegacyBackendPluginInstaller, type LegacyPluginEnvironment, type ModuleLoader, type NewBackendPluginInstaller, type ScannedPluginManifest, type ScannedPluginPackage, dynamicPluginsFeatureDiscoveryLoader, dynamicPluginsFeatureDiscoveryServiceFactory, dynamicPluginsFeatureLoader, dynamicPluginsFrontendSchemas, dynamicPluginsRootLoggerServiceFactory, dynamicPluginsSchemasServiceFactory, dynamicPluginsServiceFactory, dynamicPluginsServiceFactoryWithOptions, dynamicPluginsServiceRef, isBackendDynamicPluginInstaller };
+export { type BackendDynamicPlugin, type BackendDynamicPluginInstaller, type BackendPluginProvider, type BaseDynamicPlugin, CommonJSModuleLoader, type CommonJSModuleLoaderOptions, type DynamicPlugin, DynamicPluginManager, type DynamicPluginManagerOptions, type DynamicPluginProvider, type DynamicPluginsFactoryOptions, type DynamicPluginsFeatureLoaderOptions, type DynamicPluginsRootLoggerFactoryOptions, type DynamicPluginsSchemasOptions, type DynamicPluginsSchemasService, type FrontendDynamicPlugin, type FrontendPluginProvider, type LegacyBackendPluginInstaller, type LegacyPluginEnvironment, type ModuleLoader, type NewBackendPluginInstaller, type ScannedPluginManifest, type ScannedPluginPackage, dynamicPluginsFeatureDiscoveryLoader, dynamicPluginsFeatureDiscoveryServiceFactory, dynamicPluginsFeatureLoader, dynamicPluginsFrontendSchemas, dynamicPluginsRootLoggerServiceFactory, dynamicPluginsSchemasServiceFactory, dynamicPluginsServiceFactory, dynamicPluginsServiceFactoryWithOptions, dynamicPluginsServiceRef, isBackendDynamicPluginInstaller };
diff --git a/dist/loader/CommonJSModuleLoader.cjs.js b/dist/loader/CommonJSModuleLoader.cjs.js
index 6aa5232b543967e83874373854a33790d66cfe19..c839342f4b5308d51ece53eb952a943382805076 100644
--- a/dist/loader/CommonJSModuleLoader.cjs.js
+++ b/dist/loader/CommonJSModuleLoader.cjs.js
@@ -7,12 +7,12 @@ function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'defau
 var path__default = /*#__PURE__*/_interopDefaultCompat(path);
 
 class CommonJSModuleLoader {
-  constructor(logger) {
-    this.logger = logger;
+  constructor(options) {
+    this.options = options;
     this.module = require("node:module");
   }
   module;
-  async bootstrap(backstageRoot, dynamicPluginsPaths) {
+  async bootstrap(backstageRoot, dynamicPluginsPaths, scannedPluginManifests) {
     const backstageRootNodeModulesPath = `${backstageRoot}/node_modules`;
     const dynamicNodeModulesPaths = [
       ...dynamicPluginsPaths.map((p) => path__default.default.resolve(p, "node_modules"))
@@ -26,11 +26,53 @@ class CommonJSModuleLoader {
       const filtered = result.filter((nodeModulePath) => {
         return nodeModulePath === backstageRootNodeModulesPath || dynamicNodeModulesPaths.some((p) => nodeModulePath.startsWith(p));
       });
-      this.logger.debug(
+      this.options.logger.debug(
         `Overriding node_modules search path for dynamic plugin ${from} to: ${filtered}`
       );
       return filtered;
     };
+    const oldResolveFileName = this.module._resolveFilename;
+    this.module._resolveFilename = (request, mod, _, options) => {
+      let errorToThrow;
+      try {
+        return oldResolveFileName(request, mod, _, options);
+      } catch (e) {
+        errorToThrow = e;
+        this.options.logger.debug(
+          `Could not resolve '${request}' inside the Core backstage backend application`,
+          e instanceof Error ? e : void 0
+        );
+      }
+      const resolvingPackageJsonFromBackstageApplication = request?.endsWith("/package.json") && mod?.path && !dynamicPluginsPaths.some((p) => mod.path.startsWith(p));
+      if (!resolvingPackageJsonFromBackstageApplication) {
+        throw errorToThrow;
+      }
+      this.options.logger.info(
+        `Resolving '${request}' in the dynamic backend plugins`
+      );
+      const searchedPackageName = request.replace(/\/package.json$/, "");
+      const searchedPackageNamesWithSuffixes = (this.options.dynamicPluginPackageNameSuffixes ?? ["-dynamic"]).map((s) => `${searchedPackageName}${s}`);
+      for (const [realPath, pkg] of scannedPluginManifests.entries()) {
+        if ([searchedPackageName, ...searchedPackageNamesWithSuffixes].includes(
+          pkg.name
+        )) {
+          const resolvedPath = path__default.default.resolve(realPath, "package.json");
+          this.options.logger.info(`Resolved '${request}' at ${resolvedPath}`);
+          return resolvedPath;
+        }
+      }
+      if (this.options.customResolveDynamicPackage) {
+        const resolvedPath = this.options.customResolveDynamicPackage(
+          this.options.logger,
+          searchedPackageName,
+          scannedPluginManifests
+        );
+        if (resolvedPath) {
+          return resolvedPath;
+        }
+      }
+      throw errorToThrow;
+    };
   }
   async load(packagePath) {
     return await this.module.prototype.require(packagePath);
diff --git a/dist/loader/CommonJSModuleLoader.cjs.js.map b/dist/loader/CommonJSModuleLoader.cjs.js.map
index 3c3cd2d04cb531dc931d6c2f865bb9c028e5becb..74da256c9c3f7958126f6c7ece06be9fce6eb6d5 100644
--- a/dist/loader/CommonJSModuleLoader.cjs.js.map
+++ b/dist/loader/CommonJSModuleLoader.cjs.js.map
@@ -1 +1 @@
-{"version":3,"file":"CommonJSModuleLoader.cjs.js","sources":["../../src/loader/CommonJSModuleLoader.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ModuleLoader } from './types';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport path from 'path';\n\nexport class CommonJSModuleLoader implements ModuleLoader {\n  private module: any;\n\n  constructor(public readonly logger: LoggerService) {\n    this.module = require('node:module');\n  }\n\n  async bootstrap(\n    backstageRoot: string,\n    dynamicPluginsPaths: string[],\n  ): Promise<void> {\n    const backstageRootNodeModulesPath = `${backstageRoot}/node_modules`;\n    const dynamicNodeModulesPaths = [\n      ...dynamicPluginsPaths.map(p => path.resolve(p, 'node_modules')),\n    ];\n    const oldNodeModulePaths = this.module._nodeModulePaths;\n    this.module._nodeModulePaths = (from: string): string[] => {\n      const result: string[] = oldNodeModulePaths(from);\n      if (!dynamicPluginsPaths.some(p => from.startsWith(p))) {\n        return result;\n      }\n      const filtered = result.filter(nodeModulePath => {\n        return (\n          nodeModulePath === backstageRootNodeModulesPath ||\n          dynamicNodeModulesPaths.some(p => nodeModulePath.startsWith(p))\n        );\n      });\n      this.logger.debug(\n        `Overriding node_modules search path for dynamic plugin ${from} to: ${filtered}`,\n      );\n      return filtered;\n    };\n  }\n\n  async load(packagePath: string): Promise<any> {\n    return await this.module.prototype.require(packagePath);\n  }\n}\n"],"names":["path"],"mappings":";;;;;;;;AAmBO,MAAM,oBAA6C,CAAA;AAAA,EAGxD,YAA4B,MAAuB,EAAA;AAAvB,IAAA,IAAA,CAAA,MAAA,GAAA,MAAA,CAAA;AAC1B,IAAK,IAAA,CAAA,MAAA,GAAS,QAAQ,aAAa,CAAA,CAAA;AAAA,GACrC;AAAA,EAJQ,MAAA,CAAA;AAAA,EAMR,MAAM,SACJ,CAAA,aAAA,EACA,mBACe,EAAA;AACf,IAAM,MAAA,4BAAA,GAA+B,GAAG,aAAa,CAAA,aAAA,CAAA,CAAA;AACrD,IAAA,MAAM,uBAA0B,GAAA;AAAA,MAC9B,GAAG,oBAAoB,GAAI,CAAA,CAAA,CAAA,KAAKA,sBAAK,OAAQ,CAAA,CAAA,EAAG,cAAc,CAAC,CAAA;AAAA,KACjE,CAAA;AACA,IAAM,MAAA,kBAAA,GAAqB,KAAK,MAAO,CAAA,gBAAA,CAAA;AACvC,IAAK,IAAA,CAAA,MAAA,CAAO,gBAAmB,GAAA,CAAC,IAA2B,KAAA;AACzD,MAAM,MAAA,MAAA,GAAmB,mBAAmB,IAAI,CAAA,CAAA;AAChD,MAAI,IAAA,CAAC,oBAAoB,IAAK,CAAA,CAAA,CAAA,KAAK,KAAK,UAAW,CAAA,CAAC,CAAC,CAAG,EAAA;AACtD,QAAO,OAAA,MAAA,CAAA;AAAA,OACT;AACA,MAAM,MAAA,QAAA,GAAW,MAAO,CAAA,MAAA,CAAO,CAAkB,cAAA,KAAA;AAC/C,QACE,OAAA,cAAA,KAAmB,gCACnB,uBAAwB,CAAA,IAAA,CAAK,OAAK,cAAe,CAAA,UAAA,CAAW,CAAC,CAAC,CAAA,CAAA;AAAA,OAEjE,CAAA,CAAA;AACD,MAAA,IAAA,CAAK,MAAO,CAAA,KAAA;AAAA,QACV,CAAA,uDAAA,EAA0D,IAAI,CAAA,KAAA,EAAQ,QAAQ,CAAA,CAAA;AAAA,OAChF,CAAA;AACA,MAAO,OAAA,QAAA,CAAA;AAAA,KACT,CAAA;AAAA,GACF;AAAA,EAEA,MAAM,KAAK,WAAmC,EAAA;AAC5C,IAAA,OAAO,MAAM,IAAA,CAAK,MAAO,CAAA,SAAA,CAAU,QAAQ,WAAW,CAAA,CAAA;AAAA,GACxD;AACF;;;;"}
\ No newline at end of file
+{"version":3,"file":"CommonJSModuleLoader.cjs.js","sources":["../../src/loader/CommonJSModuleLoader.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ModuleLoader } from './types';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport path from 'path';\nimport { ScannedPluginManifest } from '../scanner';\n\n/**\n * @public\n */\nexport type CommonJSModuleLoaderOptions = {\n  logger: LoggerService;\n  dynamicPluginPackageNameSuffixes?: String[];\n  customResolveDynamicPackage?: (\n    logger: LoggerService,\n    searchedPackageName: string,\n    scannedPluginManifests: Map<string, ScannedPluginManifest>,\n  ) => string | undefined;\n};\n\n/**\n * @public\n */\nexport class CommonJSModuleLoader implements ModuleLoader {\n  private module: any;\n\n  constructor(public readonly options: CommonJSModuleLoaderOptions) {\n    this.module = require('node:module');\n  }\n\n  async bootstrap(\n    backstageRoot: string,\n    dynamicPluginsPaths: string[],\n    scannedPluginManifests: Map<string, ScannedPluginManifest>,\n  ): Promise<void> {\n    const backstageRootNodeModulesPath = `${backstageRoot}/node_modules`;\n    const dynamicNodeModulesPaths = [\n      ...dynamicPluginsPaths.map(p => path.resolve(p, 'node_modules')),\n    ];\n    const oldNodeModulePaths = this.module._nodeModulePaths;\n    this.module._nodeModulePaths = (from: string): string[] => {\n      const result: string[] = oldNodeModulePaths(from);\n      if (!dynamicPluginsPaths.some(p => from.startsWith(p))) {\n        return result;\n      }\n      const filtered = result.filter(nodeModulePath => {\n        return (\n          nodeModulePath === backstageRootNodeModulesPath ||\n          dynamicNodeModulesPaths.some(p => nodeModulePath.startsWith(p))\n        );\n      });\n      this.options.logger.debug(\n        `Overriding node_modules search path for dynamic plugin ${from} to: ${filtered}`,\n      );\n      return filtered;\n    };\n\n    const oldResolveFileName = this.module._resolveFilename;\n    this.module._resolveFilename = (\n      request: string,\n      mod: NodeModule,\n      _: boolean,\n      options: any,\n    ): any => {\n      let errorToThrow: any;\n      try {\n        return oldResolveFileName(request, mod, _, options);\n      } catch (e) {\n        errorToThrow = e;\n        this.options.logger.debug(\n          `Could not resolve '${request}' inside the Core backstage backend application`,\n          e instanceof Error ? e : undefined,\n        );\n      }\n\n      // Are we trying to resolve a `package.json` from an originating module of the core backstage application\n      // (this is mostly done by calling `@backstage/backend-plugin-api/resolvePackagePath`).\n      const resolvingPackageJsonFromBackstageApplication =\n        request?.endsWith('/package.json') &&\n        mod?.path &&\n        !dynamicPluginsPaths.some(p => mod.path.startsWith(p));\n\n      // If not, we don't need the dedicated specfic case below.\n      if (!resolvingPackageJsonFromBackstageApplication) {\n        throw errorToThrow;\n      }\n\n      this.options.logger.info(\n        `Resolving '${request}' in the dynamic backend plugins`,\n      );\n      const searchedPackageName = request.replace(/\\/package.json$/, '');\n\n      // First search for a dynamic plugin package matching the expected package name,\n      // taking in account accepted dynamic plugin package name suffixes\n      // (suffix accepted by default is '-dynamic').\n      const searchedPackageNamesWithSuffixes = (\n        this.options.dynamicPluginPackageNameSuffixes ?? ['-dynamic']\n      ).map(s => `${searchedPackageName}${s}`);\n      for (const [realPath, pkg] of scannedPluginManifests.entries()) {\n        if (\n          [searchedPackageName, ...searchedPackageNamesWithSuffixes].includes(\n            pkg.name,\n          )\n        ) {\n          const resolvedPath = path.resolve(realPath, 'package.json');\n          this.options.logger.info(`Resolved '${request}' at ${resolvedPath}`);\n          return resolvedPath;\n        }\n      }\n\n      // If a custom resolution if one is provided, use it.\n      // This allows accomodating alternate ways to package dynamic plugins:\n      // static plugin package wrapped inside a distinct dynamic plugin package for example.\n      if (this.options.customResolveDynamicPackage) {\n        const resolvedPath = this.options.customResolveDynamicPackage(\n          this.options.logger,\n          searchedPackageName,\n          scannedPluginManifests,\n        );\n        if (resolvedPath) {\n          return resolvedPath;\n        }\n      }\n      throw errorToThrow;\n    };\n  }\n\n  async load(packagePath: string): Promise<any> {\n    return await this.module.prototype.require(packagePath);\n  }\n}\n"],"names":["path"],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/manager/plugin-manager.cjs.js b/dist/manager/plugin-manager.cjs.js
index 82afea4e9938a56528211443ed2185e9439ea9eb..7e331fd05afd69e688c647b20fe4e4a95e2eb268 100644
--- a/dist/manager/plugin-manager.cjs.js
+++ b/dist/manager/plugin-manager.cjs.js
@@ -7,12 +7,9 @@ var url = require('url');
 var backendPluginApi = require('@backstage/backend-plugin-api');
 var cliNode = require('@backstage/cli-node');
 var cliCommon = require('@backstage/cli-common');
-var path = require('path');
 var fs = require('fs');
 var alpha = require('@backstage/backend-plugin-api/alpha');
 
-function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }
-
 function _interopNamespaceCompat(e) {
   if (e && typeof e === 'object' && 'default' in e) return e;
   var n = Object.create(null);
@@ -32,7 +29,6 @@ function _interopNamespaceCompat(e) {
 }
 
 var url__namespace = /*#__PURE__*/_interopNamespaceCompat(url);
-var path__default = /*#__PURE__*/_interopDefaultCompat(path);
 var fs__namespace = /*#__PURE__*/_interopNamespaceCompat(fs);
 
 class DynamicPluginManager {
@@ -53,22 +49,23 @@ class DynamicPluginManager {
     });
     const scannedPlugins = (await scanner.scanRoot()).packages;
     scanner.trackChanges();
-    const moduleLoader = options.moduleLoader || new CommonJSModuleLoader.CommonJSModuleLoader(options.logger);
+    const moduleLoader = options.moduleLoader || new CommonJSModuleLoader.CommonJSModuleLoader({ logger: options.logger });
     const manager = new DynamicPluginManager(
       options.logger,
       scannedPlugins,
       moduleLoader
     );
-    const dynamicPluginsPaths = scannedPlugins.map(
-      (p) => fs__namespace.realpathSync(
-        path__default.default.dirname(
-          path__default.default.dirname(
-            path__default.default.resolve(url__namespace.fileURLToPath(p.location), p.manifest.main)
-          )
-        )
-      )
+    const scannedPluginManifestsPerRealPath = new Map(
+      scannedPlugins.map((p) => [
+        fs__namespace.realpathSync(url__namespace.fileURLToPath(p.location)),
+        p.manifest
+      ])
+    );
+    await moduleLoader.bootstrap(
+      backstageRoot,
+      [...scannedPluginManifestsPerRealPath.keys()],
+      scannedPluginManifestsPerRealPath
     );
-    await moduleLoader.bootstrap(backstageRoot, dynamicPluginsPaths);
     scanner.subscribeToRootDirectoryChange(async () => {
       manager._availablePackages = (await scanner.scanRoot()).packages;
     });
@@ -117,8 +114,10 @@ class DynamicPluginManager {
     return loadedPlugins;
   }
   async loadBackendPlugin(plugin) {
+    const usedPluginManifest = plugin.alphaManifest?.main ?? plugin.manifest.main;
+    const usedPluginLocation = plugin.alphaManifest?.main ? `${plugin.location}/alpha` : plugin.location;
     const packagePath = url__namespace.fileURLToPath(
-      `${plugin.location}/${plugin.manifest.main}`
+      `${usedPluginLocation}/${usedPluginManifest}`
     );
     const dynamicPlugin = {
       name: plugin.manifest.name,
@@ -143,12 +142,12 @@ class DynamicPluginManager {
       }
       if (dynamicPlugin.installer) {
         this.logger.info(
-          `loaded dynamic backend plugin '${plugin.manifest.name}' from '${plugin.location}'`
+          `loaded dynamic backend plugin '${plugin.manifest.name}' from '${usedPluginLocation}'`
         );
       } else {
         dynamicPlugin.failure = `the module should either export a 'BackendFeature' or 'BackendFeatureFactory' as default export, or export a 'const dynamicPluginInstaller: BackendDynamicPluginInstaller' field as dynamic loading entrypoint.`;
         this.logger.error(
-          `dynamic backend plugin '${plugin.manifest.name}' could not be loaded from '${plugin.location}': ${dynamicPlugin.failure}`
+          `dynamic backend plugin '${plugin.manifest.name}' could not be loaded from '${usedPluginLocation}': ${dynamicPlugin.failure}`
         );
       }
       return dynamicPlugin;
@@ -156,7 +155,7 @@ class DynamicPluginManager {
       const typedError = typeof error === "object" && "message" in error && "name" in error ? error : new Error(error);
       dynamicPlugin.failure = `${typedError.name}: ${typedError.message}`;
       this.logger.error(
-        `an error occurred while loading dynamic backend plugin '${plugin.manifest.name}' from '${plugin.location}'`,
+        `an error occurred while loading dynamic backend plugin '${plugin.manifest.name}' from '${usedPluginLocation}'`,
         typedError
       );
       return dynamicPlugin;
diff --git a/dist/manager/plugin-manager.cjs.js.map b/dist/manager/plugin-manager.cjs.js.map
index af60a8735a9d7305a7abd6752501c8684efc8951..2c7f4cfcab7b6688a767f2368ef86677abff5aba 100644
--- a/dist/manager/plugin-manager.cjs.js.map
+++ b/dist/manager/plugin-manager.cjs.js.map
@@ -1 +1 @@
-{"version":3,"file":"plugin-manager.cjs.js","sources":["../../src/manager/plugin-manager.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Config } from '@backstage/config';\nimport {\n  DynamicPluginProvider,\n  BackendDynamicPlugin,\n  isBackendDynamicPluginInstaller,\n  DynamicPlugin,\n  FrontendDynamicPlugin,\n} from './types';\nimport { ScannedPluginPackage } from '../scanner';\nimport { PluginScanner } from '../scanner/plugin-scanner';\nimport { ModuleLoader } from '../loader';\nimport { CommonJSModuleLoader } from '../loader/CommonJSModuleLoader';\nimport * as url from 'url';\nimport {\n  BackendFeature,\n  LoggerService,\n  coreServices,\n  createBackendFeatureLoader,\n  createServiceFactory,\n  createServiceRef,\n} from '@backstage/backend-plugin-api';\nimport { PackageRole, PackageRoles } from '@backstage/cli-node';\nimport { findPaths } from '@backstage/cli-common';\nimport path from 'path';\nimport * as fs from 'fs';\nimport {\n  FeatureDiscoveryService,\n  featureDiscoveryServiceRef,\n} from '@backstage/backend-plugin-api/alpha';\n\n/**\n * @public\n */\nexport interface DynamicPluginManagerOptions {\n  config: Config;\n  logger: LoggerService;\n  preferAlpha?: boolean;\n  moduleLoader?: ModuleLoader;\n}\n\n/**\n * @public\n */\nexport class DynamicPluginManager implements DynamicPluginProvider {\n  static async create(\n    options: DynamicPluginManagerOptions,\n  ): Promise<DynamicPluginManager> {\n    /* eslint-disable-next-line no-restricted-syntax */\n    const backstageRoot = findPaths(__dirname).targetRoot;\n    const scanner = PluginScanner.create({\n      config: options.config,\n      logger: options.logger,\n      backstageRoot,\n      preferAlpha: options.preferAlpha,\n    });\n    const scannedPlugins = (await scanner.scanRoot()).packages;\n    scanner.trackChanges();\n    const moduleLoader =\n      options.moduleLoader || new CommonJSModuleLoader(options.logger);\n    const manager = new DynamicPluginManager(\n      options.logger,\n      scannedPlugins,\n      moduleLoader,\n    );\n\n    const dynamicPluginsPaths = scannedPlugins.map(p =>\n      fs.realpathSync(\n        path.dirname(\n          path.dirname(\n            path.resolve(url.fileURLToPath(p.location), p.manifest.main),\n          ),\n        ),\n      ),\n    );\n\n    await moduleLoader.bootstrap(backstageRoot, dynamicPluginsPaths);\n\n    scanner.subscribeToRootDirectoryChange(async () => {\n      manager._availablePackages = (await scanner.scanRoot()).packages;\n      // TODO: do not store _scannedPlugins again, but instead store a diff of the changes\n    });\n    manager._plugins.push(...(await manager.loadPlugins()));\n\n    return manager;\n  }\n\n  private readonly _plugins: DynamicPlugin[];\n  private _availablePackages: ScannedPluginPackage[];\n\n  private constructor(\n    private readonly logger: LoggerService,\n    private readonly packages: ScannedPluginPackage[],\n    private readonly moduleLoader: ModuleLoader,\n  ) {\n    this._plugins = [];\n    this._availablePackages = packages;\n  }\n\n  get availablePackages(): ScannedPluginPackage[] {\n    return this._availablePackages;\n  }\n\n  addBackendPlugin(plugin: BackendDynamicPlugin): void {\n    this._plugins.push(plugin);\n  }\n\n  private async loadPlugins(): Promise<DynamicPlugin[]> {\n    const loadedPlugins: DynamicPlugin[] = [];\n\n    for (const scannedPlugin of this.packages) {\n      const role = scannedPlugin.manifest.backstage.role;\n      const platform = PackageRoles.getRoleInfo(role).platform;\n      const isPlugin =\n        role.endsWith('-plugin') ||\n        role.endsWith('-plugin-module') ||\n        role === ('frontend-dynamic-container' as PackageRole);\n\n      if (!isPlugin) {\n        this.logger.info(\n          `skipping dynamic plugin package '${scannedPlugin.manifest.name}' from '${scannedPlugin.location}': incompatible role '${role}'`,\n        );\n        continue;\n      }\n\n      switch (platform) {\n        case 'node':\n          loadedPlugins.push(await this.loadBackendPlugin(scannedPlugin));\n          break;\n\n        case 'web':\n          loadedPlugins.push({\n            name: scannedPlugin.manifest.name,\n            version: scannedPlugin.manifest.version,\n            role: scannedPlugin.manifest.backstage.role,\n            platform: 'web',\n            // TODO(davidfestal): add required front-end plugin information here.\n          });\n          break;\n\n        default:\n          this.logger.info(\n            `skipping dynamic plugin package '${scannedPlugin.manifest.name}' from '${scannedPlugin.location}': unrelated platform '${platform}'`,\n          );\n      }\n    }\n    return loadedPlugins;\n  }\n\n  private async loadBackendPlugin(\n    plugin: ScannedPluginPackage,\n  ): Promise<BackendDynamicPlugin> {\n    const packagePath = url.fileURLToPath(\n      `${plugin.location}/${plugin.manifest.main}`,\n    );\n    const dynamicPlugin: BackendDynamicPlugin = {\n      name: plugin.manifest.name,\n      version: plugin.manifest.version,\n      platform: 'node',\n      role: plugin.manifest.backstage.role,\n    };\n\n    try {\n      const pluginModule = await this.moduleLoader.load(packagePath);\n\n      if (isBackendFeature(pluginModule.default)) {\n        dynamicPlugin.installer = {\n          kind: 'new',\n          install: () => pluginModule.default,\n        };\n      } else if (isBackendFeatureFactory(pluginModule.default)) {\n        dynamicPlugin.installer = {\n          kind: 'new',\n          install: pluginModule.default,\n        };\n      } else if (\n        isBackendDynamicPluginInstaller(pluginModule.dynamicPluginInstaller)\n      ) {\n        dynamicPlugin.installer = pluginModule.dynamicPluginInstaller;\n      }\n      if (dynamicPlugin.installer) {\n        this.logger.info(\n          `loaded dynamic backend plugin '${plugin.manifest.name}' from '${plugin.location}'`,\n        );\n      } else {\n        dynamicPlugin.failure = `the module should either export a 'BackendFeature' or 'BackendFeatureFactory' as default export, or export a 'const dynamicPluginInstaller: BackendDynamicPluginInstaller' field as dynamic loading entrypoint.`;\n        this.logger.error(\n          `dynamic backend plugin '${plugin.manifest.name}' could not be loaded from '${plugin.location}': ${dynamicPlugin.failure}`,\n        );\n      }\n      return dynamicPlugin;\n    } catch (error) {\n      const typedError =\n        typeof error === 'object' && 'message' in error && 'name' in error\n          ? error\n          : new Error(error);\n      dynamicPlugin.failure = `${typedError.name}: ${typedError.message}`;\n      this.logger.error(\n        `an error occurred while loading dynamic backend plugin '${plugin.manifest.name}' from '${plugin.location}'`,\n        typedError,\n      );\n      return dynamicPlugin;\n    }\n  }\n\n  backendPlugins(options?: {\n    includeFailed?: boolean;\n  }): BackendDynamicPlugin[] {\n    return this.plugins(options).filter(\n      (p): p is BackendDynamicPlugin => p.platform === 'node',\n    );\n  }\n\n  frontendPlugins(options?: {\n    includeFailed?: boolean;\n  }): FrontendDynamicPlugin[] {\n    return this.plugins(options).filter(\n      (p): p is FrontendDynamicPlugin => p.platform === 'web',\n    );\n  }\n\n  plugins(options?: { includeFailed?: boolean }): DynamicPlugin[] {\n    return this._plugins.filter(p => options?.includeFailed || !p.failure);\n  }\n\n  getScannedPackage(plugin: DynamicPlugin): ScannedPluginPackage {\n    const pkg = this.packages.find(\n      p =>\n        p.manifest.name === plugin.name &&\n        p.manifest.version === plugin.version,\n    );\n    if (pkg === undefined) {\n      throw new Error(\n        `The scanned package of a dynamic plugin should always be available: ${plugin.name}/${plugin.version}`,\n      );\n    }\n    return pkg;\n  }\n}\n\n/**\n * @public\n */\nexport const dynamicPluginsServiceRef = createServiceRef<DynamicPluginProvider>(\n  {\n    id: 'core.dynamicplugins',\n    scope: 'root',\n  },\n);\n\n/**\n * @public\n */\nexport interface DynamicPluginsFactoryOptions {\n  moduleLoader?(logger: LoggerService): ModuleLoader | Promise<ModuleLoader>;\n}\n\n/**\n * @public\n * @deprecated Use {@link dynamicPluginsFeatureLoader} instead, which gathers all services and features required for dynamic plugins.\n */\nexport const dynamicPluginsServiceFactoryWithOptions = (\n  options?: DynamicPluginsFactoryOptions,\n) =>\n  createServiceFactory({\n    service: dynamicPluginsServiceRef,\n    deps: {\n      config: coreServices.rootConfig,\n      logger: coreServices.rootLogger,\n    },\n    async factory({ config, logger }) {\n      return await DynamicPluginManager.create({\n        config,\n        logger,\n        preferAlpha: true,\n        moduleLoader: await options?.moduleLoader?.(logger),\n      });\n    },\n  });\n\n/**\n * @public\n * @deprecated Use {@link dynamicPluginsFeatureLoader} instead, which gathers all services and features required for dynamic plugins.\n */\nexport const dynamicPluginsServiceFactory = Object.assign(\n  dynamicPluginsServiceFactoryWithOptions,\n  dynamicPluginsServiceFactoryWithOptions(),\n);\n\nclass DynamicPluginsEnabledFeatureDiscoveryService\n  implements FeatureDiscoveryService\n{\n  constructor(\n    private readonly dynamicPlugins: DynamicPluginProvider,\n    private readonly featureDiscoveryService?: FeatureDiscoveryService,\n  ) {}\n\n  async getBackendFeatures(): Promise<{ features: Array<BackendFeature> }> {\n    const staticFeatures =\n      (await this.featureDiscoveryService?.getBackendFeatures())?.features ??\n      [];\n\n    return {\n      features: [\n        ...this.dynamicPlugins\n          .backendPlugins()\n          .flatMap((plugin): BackendFeature[] => {\n            if (plugin.installer?.kind === 'new') {\n              const installed = plugin.installer.install();\n              if (Array.isArray(installed)) {\n                return installed;\n              }\n              return [installed];\n            }\n            return [];\n          }),\n        ...staticFeatures,\n      ],\n    };\n  }\n}\n\n/**\n * @public\n * @deprecated Use {@link dynamicPluginsFeatureLoader} instead, which gathers all services and features required for dynamic plugins.\n */\nexport const dynamicPluginsFeatureDiscoveryServiceFactory =\n  createServiceFactory({\n    service: featureDiscoveryServiceRef,\n    deps: {\n      config: coreServices.rootConfig,\n      dynamicPlugins: dynamicPluginsServiceRef,\n    },\n    factory({ dynamicPlugins }) {\n      return new DynamicPluginsEnabledFeatureDiscoveryService(dynamicPlugins);\n    },\n  });\n\n/**\n * @public\n * @deprecated Use {@link dynamicPluginsFeatureLoader} instead, which gathers all services and features required for dynamic plugins.\n */\nexport const dynamicPluginsFeatureDiscoveryLoader = createBackendFeatureLoader({\n  deps: {\n    dynamicPlugins: dynamicPluginsServiceRef,\n  },\n  async loader({ dynamicPlugins }) {\n    const service = new DynamicPluginsEnabledFeatureDiscoveryService(\n      dynamicPlugins,\n    );\n    const { features } = await service.getBackendFeatures();\n    return features;\n  },\n});\n\nfunction isBackendFeature(value: unknown): value is BackendFeature {\n  return (\n    !!value &&\n    (typeof value === 'object' || typeof value === 'function') &&\n    (value as BackendFeature).$$type === '@backstage/BackendFeature'\n  );\n}\n\nfunction isBackendFeatureFactory(\n  value: unknown,\n): value is () => BackendFeature {\n  return (\n    !!value &&\n    typeof value === 'function' &&\n    (value as any).$$type === '@backstage/BackendFeatureFactory'\n  );\n}\n"],"names":["findPaths","PluginScanner","CommonJSModuleLoader","fs","path","url","PackageRoles","isBackendDynamicPluginInstaller","createServiceRef","createServiceFactory","coreServices","featureDiscoveryServiceRef","createBackendFeatureLoader"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"plugin-manager.cjs.js","sources":["../../src/manager/plugin-manager.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Config } from '@backstage/config';\nimport {\n  DynamicPluginProvider,\n  BackendDynamicPlugin,\n  isBackendDynamicPluginInstaller,\n  DynamicPlugin,\n  FrontendDynamicPlugin,\n} from './types';\nimport { ScannedPluginPackage } from '../scanner';\nimport { PluginScanner } from '../scanner/plugin-scanner';\nimport { ModuleLoader } from '../loader';\nimport { CommonJSModuleLoader } from '../loader/CommonJSModuleLoader';\nimport * as url from 'url';\nimport {\n  BackendFeature,\n  LoggerService,\n  coreServices,\n  createBackendFeatureLoader,\n  createServiceFactory,\n  createServiceRef,\n} from '@backstage/backend-plugin-api';\nimport { PackageRole, PackageRoles } from '@backstage/cli-node';\nimport { findPaths } from '@backstage/cli-common';\nimport * as fs from 'fs';\nimport {\n  FeatureDiscoveryService,\n  featureDiscoveryServiceRef,\n} from '@backstage/backend-plugin-api/alpha';\n\n/**\n * @public\n */\nexport interface DynamicPluginManagerOptions {\n  config: Config;\n  logger: LoggerService;\n  preferAlpha?: boolean;\n  moduleLoader?: ModuleLoader;\n}\n\n/**\n * @public\n */\nexport class DynamicPluginManager implements DynamicPluginProvider {\n  static async create(\n    options: DynamicPluginManagerOptions,\n  ): Promise<DynamicPluginManager> {\n    /* eslint-disable-next-line no-restricted-syntax */\n    const backstageRoot = findPaths(__dirname).targetRoot;\n    const scanner = PluginScanner.create({\n      config: options.config,\n      logger: options.logger,\n      backstageRoot,\n      preferAlpha: options.preferAlpha,\n    });\n    const scannedPlugins = (await scanner.scanRoot()).packages;\n    scanner.trackChanges();\n    const moduleLoader =\n      options.moduleLoader ||\n      new CommonJSModuleLoader({ logger: options.logger });\n    const manager = new DynamicPluginManager(\n      options.logger,\n      scannedPlugins,\n      moduleLoader,\n    );\n\n    const scannedPluginManifestsPerRealPath = new Map(\n      scannedPlugins.map(p => [\n        fs.realpathSync(url.fileURLToPath(p.location)),\n        p.manifest,\n      ]),\n    );\n\n    await moduleLoader.bootstrap(\n      backstageRoot,\n      [...scannedPluginManifestsPerRealPath.keys()],\n      scannedPluginManifestsPerRealPath,\n    );\n\n    scanner.subscribeToRootDirectoryChange(async () => {\n      manager._availablePackages = (await scanner.scanRoot()).packages;\n      // TODO: do not store _scannedPlugins again, but instead store a diff of the changes\n    });\n    manager._plugins.push(...(await manager.loadPlugins()));\n\n    return manager;\n  }\n\n  private readonly _plugins: DynamicPlugin[];\n  private _availablePackages: ScannedPluginPackage[];\n\n  private constructor(\n    private readonly logger: LoggerService,\n    private readonly packages: ScannedPluginPackage[],\n    private readonly moduleLoader: ModuleLoader,\n  ) {\n    this._plugins = [];\n    this._availablePackages = packages;\n  }\n\n  get availablePackages(): ScannedPluginPackage[] {\n    return this._availablePackages;\n  }\n\n  addBackendPlugin(plugin: BackendDynamicPlugin): void {\n    this._plugins.push(plugin);\n  }\n\n  private async loadPlugins(): Promise<DynamicPlugin[]> {\n    const loadedPlugins: DynamicPlugin[] = [];\n\n    for (const scannedPlugin of this.packages) {\n      const role = scannedPlugin.manifest.backstage.role;\n      const platform = PackageRoles.getRoleInfo(role).platform;\n      const isPlugin =\n        role.endsWith('-plugin') ||\n        role.endsWith('-plugin-module') ||\n        role === ('frontend-dynamic-container' as PackageRole);\n\n      if (!isPlugin) {\n        this.logger.info(\n          `skipping dynamic plugin package '${scannedPlugin.manifest.name}' from '${scannedPlugin.location}': incompatible role '${role}'`,\n        );\n        continue;\n      }\n\n      switch (platform) {\n        case 'node':\n          loadedPlugins.push(await this.loadBackendPlugin(scannedPlugin));\n          break;\n\n        case 'web':\n          loadedPlugins.push({\n            name: scannedPlugin.manifest.name,\n            version: scannedPlugin.manifest.version,\n            role: scannedPlugin.manifest.backstage.role,\n            platform: 'web',\n            // TODO(davidfestal): add required front-end plugin information here.\n          });\n          break;\n\n        default:\n          this.logger.info(\n            `skipping dynamic plugin package '${scannedPlugin.manifest.name}' from '${scannedPlugin.location}': unrelated platform '${platform}'`,\n          );\n      }\n    }\n    return loadedPlugins;\n  }\n\n  private async loadBackendPlugin(\n    plugin: ScannedPluginPackage,\n  ): Promise<BackendDynamicPlugin> {\n    const usedPluginManifest =\n      plugin.alphaManifest?.main ?? plugin.manifest.main;\n    const usedPluginLocation = plugin.alphaManifest?.main\n      ? `${plugin.location}/alpha`\n      : plugin.location;\n    const packagePath = url.fileURLToPath(\n      `${usedPluginLocation}/${usedPluginManifest}`,\n    );\n    const dynamicPlugin: BackendDynamicPlugin = {\n      name: plugin.manifest.name,\n      version: plugin.manifest.version,\n      platform: 'node',\n      role: plugin.manifest.backstage.role,\n    };\n\n    try {\n      const pluginModule = await this.moduleLoader.load(packagePath);\n\n      if (isBackendFeature(pluginModule.default)) {\n        dynamicPlugin.installer = {\n          kind: 'new',\n          install: () => pluginModule.default,\n        };\n      } else if (isBackendFeatureFactory(pluginModule.default)) {\n        dynamicPlugin.installer = {\n          kind: 'new',\n          install: pluginModule.default,\n        };\n      } else if (\n        isBackendDynamicPluginInstaller(pluginModule.dynamicPluginInstaller)\n      ) {\n        dynamicPlugin.installer = pluginModule.dynamicPluginInstaller;\n      }\n      if (dynamicPlugin.installer) {\n        this.logger.info(\n          `loaded dynamic backend plugin '${plugin.manifest.name}' from '${usedPluginLocation}'`,\n        );\n      } else {\n        dynamicPlugin.failure = `the module should either export a 'BackendFeature' or 'BackendFeatureFactory' as default export, or export a 'const dynamicPluginInstaller: BackendDynamicPluginInstaller' field as dynamic loading entrypoint.`;\n        this.logger.error(\n          `dynamic backend plugin '${plugin.manifest.name}' could not be loaded from '${usedPluginLocation}': ${dynamicPlugin.failure}`,\n        );\n      }\n      return dynamicPlugin;\n    } catch (error) {\n      const typedError =\n        typeof error === 'object' && 'message' in error && 'name' in error\n          ? error\n          : new Error(error);\n      dynamicPlugin.failure = `${typedError.name}: ${typedError.message}`;\n      this.logger.error(\n        `an error occurred while loading dynamic backend plugin '${plugin.manifest.name}' from '${usedPluginLocation}'`,\n        typedError,\n      );\n      return dynamicPlugin;\n    }\n  }\n\n  backendPlugins(options?: {\n    includeFailed?: boolean;\n  }): BackendDynamicPlugin[] {\n    return this.plugins(options).filter(\n      (p): p is BackendDynamicPlugin => p.platform === 'node',\n    );\n  }\n\n  frontendPlugins(options?: {\n    includeFailed?: boolean;\n  }): FrontendDynamicPlugin[] {\n    return this.plugins(options).filter(\n      (p): p is FrontendDynamicPlugin => p.platform === 'web',\n    );\n  }\n\n  plugins(options?: { includeFailed?: boolean }): DynamicPlugin[] {\n    return this._plugins.filter(p => options?.includeFailed || !p.failure);\n  }\n\n  getScannedPackage(plugin: DynamicPlugin): ScannedPluginPackage {\n    const pkg = this.packages.find(\n      p =>\n        p.manifest.name === plugin.name &&\n        p.manifest.version === plugin.version,\n    );\n    if (pkg === undefined) {\n      throw new Error(\n        `The scanned package of a dynamic plugin should always be available: ${plugin.name}/${plugin.version}`,\n      );\n    }\n    return pkg;\n  }\n}\n\n/**\n * @public\n */\nexport const dynamicPluginsServiceRef = createServiceRef<DynamicPluginProvider>(\n  {\n    id: 'core.dynamicplugins',\n    scope: 'root',\n  },\n);\n\n/**\n * @public\n */\nexport interface DynamicPluginsFactoryOptions {\n  moduleLoader?(logger: LoggerService): ModuleLoader | Promise<ModuleLoader>;\n}\n\n/**\n * @public\n * @deprecated Use {@link dynamicPluginsFeatureLoader} instead, which gathers all services and features required for dynamic plugins.\n */\nexport const dynamicPluginsServiceFactoryWithOptions = (\n  options?: DynamicPluginsFactoryOptions,\n) =>\n  createServiceFactory({\n    service: dynamicPluginsServiceRef,\n    deps: {\n      config: coreServices.rootConfig,\n      logger: coreServices.rootLogger,\n    },\n    async factory({ config, logger }) {\n      return await DynamicPluginManager.create({\n        config,\n        logger,\n        preferAlpha: true,\n        moduleLoader: await options?.moduleLoader?.(logger),\n      });\n    },\n  });\n\n/**\n * @public\n * @deprecated Use {@link dynamicPluginsFeatureLoader} instead, which gathers all services and features required for dynamic plugins.\n */\nexport const dynamicPluginsServiceFactory = Object.assign(\n  dynamicPluginsServiceFactoryWithOptions,\n  dynamicPluginsServiceFactoryWithOptions(),\n);\n\nclass DynamicPluginsEnabledFeatureDiscoveryService\n  implements FeatureDiscoveryService\n{\n  constructor(\n    private readonly dynamicPlugins: DynamicPluginProvider,\n    private readonly featureDiscoveryService?: FeatureDiscoveryService,\n  ) {}\n\n  async getBackendFeatures(): Promise<{ features: Array<BackendFeature> }> {\n    const staticFeatures =\n      (await this.featureDiscoveryService?.getBackendFeatures())?.features ??\n      [];\n\n    return {\n      features: [\n        ...this.dynamicPlugins\n          .backendPlugins()\n          .flatMap((plugin): BackendFeature[] => {\n            if (plugin.installer?.kind === 'new') {\n              const installed = plugin.installer.install();\n              if (Array.isArray(installed)) {\n                return installed;\n              }\n              return [installed];\n            }\n            return [];\n          }),\n        ...staticFeatures,\n      ],\n    };\n  }\n}\n\n/**\n * @public\n * @deprecated Use {@link dynamicPluginsFeatureLoader} instead, which gathers all services and features required for dynamic plugins.\n */\nexport const dynamicPluginsFeatureDiscoveryServiceFactory =\n  createServiceFactory({\n    service: featureDiscoveryServiceRef,\n    deps: {\n      config: coreServices.rootConfig,\n      dynamicPlugins: dynamicPluginsServiceRef,\n    },\n    factory({ dynamicPlugins }) {\n      return new DynamicPluginsEnabledFeatureDiscoveryService(dynamicPlugins);\n    },\n  });\n\n/**\n * @public\n * @deprecated Use {@link dynamicPluginsFeatureLoader} instead, which gathers all services and features required for dynamic plugins.\n */\nexport const dynamicPluginsFeatureDiscoveryLoader = createBackendFeatureLoader({\n  deps: {\n    dynamicPlugins: dynamicPluginsServiceRef,\n  },\n  async loader({ dynamicPlugins }) {\n    const service = new DynamicPluginsEnabledFeatureDiscoveryService(\n      dynamicPlugins,\n    );\n    const { features } = await service.getBackendFeatures();\n    return features;\n  },\n});\n\nfunction isBackendFeature(value: unknown): value is BackendFeature {\n  return (\n    !!value &&\n    (typeof value === 'object' || typeof value === 'function') &&\n    (value as BackendFeature).$$type === '@backstage/BackendFeature'\n  );\n}\n\nfunction isBackendFeatureFactory(\n  value: unknown,\n): value is () => BackendFeature {\n  return (\n    !!value &&\n    typeof value === 'function' &&\n    (value as any).$$type === '@backstage/BackendFeatureFactory'\n  );\n}\n"],"names":["findPaths","PluginScanner","CommonJSModuleLoader","fs","url","PackageRoles","isBackendDynamicPluginInstaller","createServiceRef","createServiceFactory","coreServices","featureDiscoveryServiceRef","createBackendFeatureLoader"],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/scanner/plugin-scanner.cjs.js b/dist/scanner/plugin-scanner.cjs.js
index 1fb532f100a6e08059031adcc04f1f6576d99821..9370a55d3afbf2b08ac0a8eec788b372f143b0a7 100644
--- a/dist/scanner/plugin-scanner.cjs.js
+++ b/dist/scanner/plugin-scanner.cjs.js
@@ -6,7 +6,7 @@ var chokidar = require('chokidar');
 var path = require('path');
 var url = require('url');
 var debounce = require('lodash/debounce');
-var cliNode = require('@backstage/cli-node');
+var errors = require('@backstage/errors');
 
 function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }
 
@@ -138,49 +138,24 @@ Please add '${backstageNodeModules}' to the 'NODE_PATH' when running the backsta
         continue;
       }
       let scannedPlugin;
-      let platform;
       try {
         scannedPlugin = await this.scanDir(pluginHome);
         if (!scannedPlugin.manifest.main) {
           throw new Error("field 'main' not found in 'package.json'");
         }
-        if (scannedPlugin.manifest.backstage?.role) {
-          platform = cliNode.PackageRoles.getRoleInfo(
-            scannedPlugin.manifest.backstage.role
-          ).platform;
-        } else {
+        if (!scannedPlugin.manifest.backstage?.role) {
           throw new Error("field 'backstage.role' not found in 'package.json'");
         }
       } catch (e) {
-        this.logger.error(
-          `failed to load dynamic plugin manifest from '${pluginHome}'`,
-          e
-        );
-        continue;
-      }
-      if (platform === "node") {
-        if (this.preferAlpha) {
-          const pluginHomeAlpha = path__namespace.resolve(pluginHome, "alpha");
-          if (fs.existsSync(pluginHomeAlpha)) {
-            if ((await fs__namespace.lstat(pluginHomeAlpha)).isDirectory()) {
-              const backstage = scannedPlugin.manifest.backstage;
-              try {
-                scannedPlugin = await this.scanDir(pluginHomeAlpha);
-              } catch (e) {
-                this.logger.error(
-                  `failed to load dynamic plugin manifest from '${pluginHomeAlpha}'`,
-                  e
-                );
-                continue;
-              }
-              scannedPlugin.manifest.backstage = backstage;
-            } else {
-              this.logger.warn(
-                `skipping '${pluginHomeAlpha}' since it is not a directory`
-              );
-            }
-          }
+        if (e instanceof errors.ForwardedError) {
+          this.logger.error(e.message, e.cause);
+        } else {
+          this.logger.error(
+            `failed to load dynamic plugin manifest from '${pluginHome}'`,
+            e
+          );
         }
+        continue;
       }
       scannedPlugins.push(scannedPlugin);
     }
@@ -190,10 +165,35 @@ Please add '${backstageNodeModules}' to the 'NODE_PATH' when running the backsta
     const manifestFile = path__namespace.resolve(pluginHome, "package.json");
     const content = await fs__namespace.readFile(manifestFile);
     const manifest = JSON.parse(content.toString());
-    return {
+    const scannedPluginPackage = {
       location: url__namespace.pathToFileURL(pluginHome),
       manifest
     };
+    if (this.preferAlpha) {
+      const pluginHomeAlpha = path__namespace.resolve(pluginHome, "alpha");
+      if (fs.existsSync(pluginHomeAlpha)) {
+        if ((await fs__namespace.lstat(pluginHomeAlpha)).isDirectory()) {
+          try {
+            const alphaContent = await fs__namespace.readFile(
+              path__namespace.resolve(pluginHomeAlpha, "package.json")
+            );
+            scannedPluginPackage.alphaManifest = JSON.parse(
+              alphaContent.toString()
+            );
+          } catch (e) {
+            throw new errors.ForwardedError(
+              `failed to load dynamic plugin manifest from '${pluginHome}/alpha'`,
+              e
+            );
+          }
+        } else {
+          this.logger.warn(
+            `skipping '${pluginHomeAlpha}' since it is not a directory`
+          );
+        }
+      }
+    }
+    return scannedPluginPackage;
   }
   async trackChanges() {
     const setupRootDirectoryWatcher = async () => {
diff --git a/dist/scanner/plugin-scanner.cjs.js.map b/dist/scanner/plugin-scanner.cjs.js.map
index 18ed171563406c671ba1e805b3e37a8c9021b6f7..7bbfc723bfe1655dc56296b9e54e08d838103948 100644
--- a/dist/scanner/plugin-scanner.cjs.js.map
+++ b/dist/scanner/plugin-scanner.cjs.js.map
@@ -1 +1 @@
-{"version":3,"file":"plugin-scanner.cjs.js","sources":["../../src/scanner/plugin-scanner.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Config } from '@backstage/config';\nimport { ScannedPluginPackage, ScannedPluginManifest } from './types';\nimport * as fs from 'fs/promises';\nimport { Stats, lstatSync, existsSync } from 'fs';\nimport * as chokidar from 'chokidar';\nimport * as path from 'path';\nimport * as url from 'url';\nimport debounce from 'lodash/debounce';\nimport { PackagePlatform, PackageRoles } from '@backstage/cli-node';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\nexport interface DynamicPluginScannerOptions {\n  config: Config;\n  backstageRoot: string;\n  logger: LoggerService;\n  preferAlpha?: boolean;\n}\n\nexport interface ScanRootResponse {\n  packages: ScannedPluginPackage[];\n}\n\nexport const configKey = 'dynamicPlugins';\n\nexport class PluginScanner {\n  private _rootDirectory?: string;\n  private configUnsubscribe?: () => void;\n  private rootDirectoryWatcher?: chokidar.FSWatcher;\n  private subscribers: (() => void)[] = [];\n\n  private constructor(\n    private readonly config: Config,\n    private readonly logger: LoggerService,\n    private readonly backstageRoot: string,\n    private readonly preferAlpha: boolean,\n  ) {}\n\n  static create(options: DynamicPluginScannerOptions): PluginScanner {\n    const scanner = new PluginScanner(\n      options.config,\n      options.logger,\n      options.backstageRoot,\n      options.preferAlpha || false,\n    );\n    scanner.applyConfig();\n    return scanner;\n  }\n\n  subscribeToRootDirectoryChange(subscriber: () => void) {\n    this.subscribers.push(subscriber);\n  }\n\n  get rootDirectory(): string | undefined {\n    return this._rootDirectory;\n  }\n\n  private applyConfig(): void | never {\n    const dynamicPlugins = this.config.getOptional(configKey);\n    if (!dynamicPlugins) {\n      this.logger.info(`'${configKey}' config entry not found.`);\n      this._rootDirectory = undefined;\n      return;\n    }\n    if (typeof dynamicPlugins !== 'object') {\n      this.logger.warn(`'${configKey}' config entry should be an object.`);\n      this._rootDirectory = undefined;\n      return;\n    }\n    if (!('rootDirectory' in dynamicPlugins)) {\n      this.logger.warn(\n        `'${configKey}' config entry does not contain the 'rootDirectory' field.`,\n      );\n      this._rootDirectory = undefined;\n      return;\n    }\n    if (typeof dynamicPlugins.rootDirectory !== 'string') {\n      this.logger.warn(\n        `'${configKey}.rootDirectory' config entry should be a string.`,\n      );\n      this._rootDirectory = undefined;\n      return;\n    }\n\n    const dynamicPluginsRootPath = path.isAbsolute(dynamicPlugins.rootDirectory)\n      ? path.resolve(dynamicPlugins.rootDirectory)\n      : path.resolve(this.backstageRoot, dynamicPlugins.rootDirectory);\n\n    if (\n      !path\n        .dirname(dynamicPluginsRootPath)\n        .startsWith(path.resolve(this.backstageRoot))\n    ) {\n      const nodePath = process.env.NODE_PATH;\n      const backstageNodeModules = path.resolve(\n        this.backstageRoot,\n        'node_modules',\n      );\n      if (\n        !nodePath ||\n        !nodePath.split(path.delimiter).includes(backstageNodeModules)\n      ) {\n        throw new Error(\n          `Dynamic plugins under '${dynamicPluginsRootPath}' cannot access backstage modules in '${backstageNodeModules}'.\\n` +\n            `Please add '${backstageNodeModules}' to the 'NODE_PATH' when running the backstage backend.`,\n        );\n      }\n    }\n    if (!lstatSync(dynamicPluginsRootPath).isDirectory()) {\n      throw new Error('Not a directory');\n    }\n\n    this._rootDirectory = dynamicPluginsRootPath;\n  }\n\n  async scanRoot(): Promise<ScanRootResponse> {\n    if (!this._rootDirectory) {\n      return { packages: [] };\n    }\n\n    const dynamicPluginsLocation = this._rootDirectory;\n    const scannedPlugins: ScannedPluginPackage[] = [];\n    for (const dirEnt of await fs.readdir(dynamicPluginsLocation, {\n      withFileTypes: true,\n    })) {\n      const pluginDir = dirEnt;\n\n      if (pluginDir.name === 'lost+found') {\n        this.logger.debug(`skipping '${pluginDir.name}' system directory`);\n        continue;\n      }\n      const pluginHome = path.normalize(\n        path.resolve(dynamicPluginsLocation, pluginDir.name),\n      );\n      if (dirEnt.isSymbolicLink()) {\n        if (!(await fs.lstat(await fs.readlink(pluginHome))).isDirectory()) {\n          this.logger.info(\n            `skipping '${pluginHome}' since it is not a directory`,\n          );\n          continue;\n        }\n      } else if (!dirEnt.isDirectory()) {\n        this.logger.info(\n          `skipping '${pluginHome}' since it is not a directory`,\n        );\n        continue;\n      }\n\n      let scannedPlugin: ScannedPluginPackage;\n      let platform: PackagePlatform;\n      try {\n        scannedPlugin = await this.scanDir(pluginHome);\n        if (!scannedPlugin.manifest.main) {\n          throw new Error(\"field 'main' not found in 'package.json'\");\n        }\n        if (scannedPlugin.manifest.backstage?.role) {\n          platform = PackageRoles.getRoleInfo(\n            scannedPlugin.manifest.backstage.role,\n          ).platform;\n        } else {\n          throw new Error(\"field 'backstage.role' not found in 'package.json'\");\n        }\n      } catch (e) {\n        this.logger.error(\n          `failed to load dynamic plugin manifest from '${pluginHome}'`,\n          e,\n        );\n        continue;\n      }\n\n      if (platform === 'node') {\n        if (this.preferAlpha) {\n          const pluginHomeAlpha = path.resolve(pluginHome, 'alpha');\n          if (existsSync(pluginHomeAlpha)) {\n            if ((await fs.lstat(pluginHomeAlpha)).isDirectory()) {\n              const backstage = scannedPlugin.manifest.backstage;\n              try {\n                scannedPlugin = await this.scanDir(pluginHomeAlpha);\n              } catch (e) {\n                this.logger.error(\n                  `failed to load dynamic plugin manifest from '${pluginHomeAlpha}'`,\n                  e,\n                );\n                continue;\n              }\n              scannedPlugin.manifest.backstage = backstage;\n            } else {\n              this.logger.warn(\n                `skipping '${pluginHomeAlpha}' since it is not a directory`,\n              );\n            }\n          }\n        }\n      }\n\n      scannedPlugins.push(scannedPlugin);\n    }\n    return { packages: scannedPlugins };\n  }\n\n  private async scanDir(pluginHome: string): Promise<ScannedPluginPackage> {\n    const manifestFile = path.resolve(pluginHome, 'package.json');\n    const content = await fs.readFile(manifestFile);\n    const manifest: ScannedPluginManifest = JSON.parse(content.toString());\n    return {\n      location: url.pathToFileURL(pluginHome),\n      manifest: manifest,\n    };\n  }\n\n  async trackChanges(): Promise<void> {\n    const setupRootDirectoryWatcher = async (): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        if (!this._rootDirectory) {\n          resolve();\n          return;\n        }\n        const callSubscribers = debounce(() => {\n          this.subscribers.forEach(s => s());\n        }, 500);\n        let ready = false;\n        this.rootDirectoryWatcher = chokidar\n          .watch(this._rootDirectory, {\n            ignoreInitial: true,\n            followSymlinks: true,\n            depth: 1,\n            disableGlobbing: true,\n          })\n          .on(\n            'all',\n            (\n              event: 'add' | 'addDir' | 'change' | 'unlink' | 'unlinkDir',\n              eventPath: string,\n              _: Stats | undefined,\n            ): void => {\n              if (\n                (['addDir', 'unlinkDir'].includes(event) &&\n                  path.dirname(eventPath) === this._rootDirectory) ||\n                (['add', 'unlink', 'change'].includes(event) &&\n                  path.dirname(path.dirname(eventPath)) ===\n                    this._rootDirectory &&\n                  path.basename(eventPath) === 'package.json')\n              ) {\n                this.logger.info(\n                  `rootDirectory changed (${event} - ${eventPath}): scanning plugins again`,\n                );\n                callSubscribers();\n              } else {\n                this.logger.debug(\n                  `rootDirectory changed (${event} - ${eventPath}): no need to scan plugins again`,\n                );\n              }\n            },\n          )\n          .on('error', (error: Error) => {\n            this.logger.error(\n              `error while watching '${this.rootDirectory}'`,\n              error,\n            );\n            if (!ready) {\n              reject(error);\n            }\n          })\n          .on('ready', () => {\n            ready = true;\n            resolve();\n          });\n      });\n    };\n\n    await setupRootDirectoryWatcher();\n    if (this.config.subscribe) {\n      const { unsubscribe } = this.config.subscribe(async (): Promise<void> => {\n        const oldRootDirectory = this._rootDirectory;\n        try {\n          this.applyConfig();\n        } catch (e) {\n          this.logger.error(\n            'failed to apply new config for dynamic plugins',\n            e,\n          );\n        }\n        if (oldRootDirectory !== this._rootDirectory) {\n          this.logger.info(\n            `rootDirectory changed in Config from '${oldRootDirectory}' to '${this._rootDirectory}'`,\n          );\n          this.subscribers.forEach(s => s());\n          if (this.rootDirectoryWatcher) {\n            await this.rootDirectoryWatcher.close();\n          }\n          await setupRootDirectoryWatcher();\n        }\n      });\n      this.configUnsubscribe = unsubscribe;\n    }\n  }\n\n  async untrackChanges() {\n    if (this.rootDirectoryWatcher) {\n      this.rootDirectoryWatcher.close();\n    }\n    if (this.configUnsubscribe) {\n      this.configUnsubscribe();\n    }\n  }\n\n  destructor() {\n    this.untrackChanges();\n  }\n}\n"],"names":["path","lstatSync","fs","PackageRoles","existsSync","url","debounce","chokidar"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"plugin-scanner.cjs.js","sources":["../../src/scanner/plugin-scanner.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Config } from '@backstage/config';\nimport { ScannedPluginPackage, ScannedPluginManifest } from './types';\nimport * as fs from 'fs/promises';\nimport { Stats, lstatSync, existsSync } from 'fs';\nimport * as chokidar from 'chokidar';\nimport * as path from 'path';\nimport * as url from 'url';\nimport debounce from 'lodash/debounce';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { ForwardedError } from '@backstage/errors';\n\nexport interface DynamicPluginScannerOptions {\n  config: Config;\n  backstageRoot: string;\n  logger: LoggerService;\n  preferAlpha?: boolean;\n}\n\nexport interface ScanRootResponse {\n  packages: ScannedPluginPackage[];\n}\n\nexport const configKey = 'dynamicPlugins';\n\nexport class PluginScanner {\n  private _rootDirectory?: string;\n  private configUnsubscribe?: () => void;\n  private rootDirectoryWatcher?: chokidar.FSWatcher;\n  private subscribers: (() => void)[] = [];\n\n  private constructor(\n    private readonly config: Config,\n    private readonly logger: LoggerService,\n    private readonly backstageRoot: string,\n    private readonly preferAlpha: boolean,\n  ) {}\n\n  static create(options: DynamicPluginScannerOptions): PluginScanner {\n    const scanner = new PluginScanner(\n      options.config,\n      options.logger,\n      options.backstageRoot,\n      options.preferAlpha || false,\n    );\n    scanner.applyConfig();\n    return scanner;\n  }\n\n  subscribeToRootDirectoryChange(subscriber: () => void) {\n    this.subscribers.push(subscriber);\n  }\n\n  get rootDirectory(): string | undefined {\n    return this._rootDirectory;\n  }\n\n  private applyConfig(): void | never {\n    const dynamicPlugins = this.config.getOptional(configKey);\n    if (!dynamicPlugins) {\n      this.logger.info(`'${configKey}' config entry not found.`);\n      this._rootDirectory = undefined;\n      return;\n    }\n    if (typeof dynamicPlugins !== 'object') {\n      this.logger.warn(`'${configKey}' config entry should be an object.`);\n      this._rootDirectory = undefined;\n      return;\n    }\n    if (!('rootDirectory' in dynamicPlugins)) {\n      this.logger.warn(\n        `'${configKey}' config entry does not contain the 'rootDirectory' field.`,\n      );\n      this._rootDirectory = undefined;\n      return;\n    }\n    if (typeof dynamicPlugins.rootDirectory !== 'string') {\n      this.logger.warn(\n        `'${configKey}.rootDirectory' config entry should be a string.`,\n      );\n      this._rootDirectory = undefined;\n      return;\n    }\n\n    const dynamicPluginsRootPath = path.isAbsolute(dynamicPlugins.rootDirectory)\n      ? path.resolve(dynamicPlugins.rootDirectory)\n      : path.resolve(this.backstageRoot, dynamicPlugins.rootDirectory);\n\n    if (\n      !path\n        .dirname(dynamicPluginsRootPath)\n        .startsWith(path.resolve(this.backstageRoot))\n    ) {\n      const nodePath = process.env.NODE_PATH;\n      const backstageNodeModules = path.resolve(\n        this.backstageRoot,\n        'node_modules',\n      );\n      if (\n        !nodePath ||\n        !nodePath.split(path.delimiter).includes(backstageNodeModules)\n      ) {\n        throw new Error(\n          `Dynamic plugins under '${dynamicPluginsRootPath}' cannot access backstage modules in '${backstageNodeModules}'.\\n` +\n            `Please add '${backstageNodeModules}' to the 'NODE_PATH' when running the backstage backend.`,\n        );\n      }\n    }\n    if (!lstatSync(dynamicPluginsRootPath).isDirectory()) {\n      throw new Error('Not a directory');\n    }\n\n    this._rootDirectory = dynamicPluginsRootPath;\n  }\n\n  async scanRoot(): Promise<ScanRootResponse> {\n    if (!this._rootDirectory) {\n      return { packages: [] };\n    }\n\n    const dynamicPluginsLocation = this._rootDirectory;\n    const scannedPlugins: ScannedPluginPackage[] = [];\n    for (const dirEnt of await fs.readdir(dynamicPluginsLocation, {\n      withFileTypes: true,\n    })) {\n      const pluginDir = dirEnt;\n\n      if (pluginDir.name === 'lost+found') {\n        this.logger.debug(`skipping '${pluginDir.name}' system directory`);\n        continue;\n      }\n      const pluginHome = path.normalize(\n        path.resolve(dynamicPluginsLocation, pluginDir.name),\n      );\n      if (dirEnt.isSymbolicLink()) {\n        if (!(await fs.lstat(await fs.readlink(pluginHome))).isDirectory()) {\n          this.logger.info(\n            `skipping '${pluginHome}' since it is not a directory`,\n          );\n          continue;\n        }\n      } else if (!dirEnt.isDirectory()) {\n        this.logger.info(\n          `skipping '${pluginHome}' since it is not a directory`,\n        );\n        continue;\n      }\n\n      let scannedPlugin: ScannedPluginPackage;\n      try {\n        scannedPlugin = await this.scanDir(pluginHome);\n        if (!scannedPlugin.manifest.main) {\n          throw new Error(\"field 'main' not found in 'package.json'\");\n        }\n        if (!scannedPlugin.manifest.backstage?.role) {\n          throw new Error(\"field 'backstage.role' not found in 'package.json'\");\n        }\n      } catch (e) {\n        if (e instanceof ForwardedError) {\n          this.logger.error(e.message, e.cause);\n        } else {\n          this.logger.error(\n            `failed to load dynamic plugin manifest from '${pluginHome}'`,\n            e,\n          );\n        }\n        continue;\n      }\n      scannedPlugins.push(scannedPlugin);\n    }\n    return { packages: scannedPlugins };\n  }\n\n  private async scanDir(pluginHome: string): Promise<ScannedPluginPackage> {\n    const manifestFile = path.resolve(pluginHome, 'package.json');\n    const content = await fs.readFile(manifestFile);\n    const manifest: ScannedPluginManifest = JSON.parse(content.toString());\n    const scannedPluginPackage: ScannedPluginPackage = {\n      location: url.pathToFileURL(pluginHome),\n      manifest: manifest,\n    };\n\n    if (this.preferAlpha) {\n      const pluginHomeAlpha = path.resolve(pluginHome, 'alpha');\n      if (existsSync(pluginHomeAlpha)) {\n        if ((await fs.lstat(pluginHomeAlpha)).isDirectory()) {\n          try {\n            const alphaContent = await fs.readFile(\n              path.resolve(pluginHomeAlpha, 'package.json'),\n            );\n            scannedPluginPackage.alphaManifest = JSON.parse(\n              alphaContent.toString(),\n            );\n          } catch (e) {\n            throw new ForwardedError(\n              `failed to load dynamic plugin manifest from '${pluginHome}/alpha'`,\n              e,\n            );\n          }\n        } else {\n          this.logger.warn(\n            `skipping '${pluginHomeAlpha}' since it is not a directory`,\n          );\n        }\n      }\n    }\n\n    return scannedPluginPackage;\n  }\n\n  async trackChanges(): Promise<void> {\n    const setupRootDirectoryWatcher = async (): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        if (!this._rootDirectory) {\n          resolve();\n          return;\n        }\n        const callSubscribers = debounce(() => {\n          this.subscribers.forEach(s => s());\n        }, 500);\n        let ready = false;\n        this.rootDirectoryWatcher = chokidar\n          .watch(this._rootDirectory, {\n            ignoreInitial: true,\n            followSymlinks: true,\n            depth: 1,\n            disableGlobbing: true,\n          })\n          .on(\n            'all',\n            (\n              event: 'add' | 'addDir' | 'change' | 'unlink' | 'unlinkDir',\n              eventPath: string,\n              _: Stats | undefined,\n            ): void => {\n              if (\n                (['addDir', 'unlinkDir'].includes(event) &&\n                  path.dirname(eventPath) === this._rootDirectory) ||\n                (['add', 'unlink', 'change'].includes(event) &&\n                  path.dirname(path.dirname(eventPath)) ===\n                    this._rootDirectory &&\n                  path.basename(eventPath) === 'package.json')\n              ) {\n                this.logger.info(\n                  `rootDirectory changed (${event} - ${eventPath}): scanning plugins again`,\n                );\n                callSubscribers();\n              } else {\n                this.logger.debug(\n                  `rootDirectory changed (${event} - ${eventPath}): no need to scan plugins again`,\n                );\n              }\n            },\n          )\n          .on('error', (error: Error) => {\n            this.logger.error(\n              `error while watching '${this.rootDirectory}'`,\n              error,\n            );\n            if (!ready) {\n              reject(error);\n            }\n          })\n          .on('ready', () => {\n            ready = true;\n            resolve();\n          });\n      });\n    };\n\n    await setupRootDirectoryWatcher();\n    if (this.config.subscribe) {\n      const { unsubscribe } = this.config.subscribe(async (): Promise<void> => {\n        const oldRootDirectory = this._rootDirectory;\n        try {\n          this.applyConfig();\n        } catch (e) {\n          this.logger.error(\n            'failed to apply new config for dynamic plugins',\n            e,\n          );\n        }\n        if (oldRootDirectory !== this._rootDirectory) {\n          this.logger.info(\n            `rootDirectory changed in Config from '${oldRootDirectory}' to '${this._rootDirectory}'`,\n          );\n          this.subscribers.forEach(s => s());\n          if (this.rootDirectoryWatcher) {\n            await this.rootDirectoryWatcher.close();\n          }\n          await setupRootDirectoryWatcher();\n        }\n      });\n      this.configUnsubscribe = unsubscribe;\n    }\n  }\n\n  async untrackChanges() {\n    if (this.rootDirectoryWatcher) {\n      this.rootDirectoryWatcher.close();\n    }\n    if (this.configUnsubscribe) {\n      this.configUnsubscribe();\n    }\n  }\n\n  destructor() {\n    this.untrackChanges();\n  }\n}\n"],"names":["path","lstatSync","fs","ForwardedError","url","existsSync","debounce","chokidar"],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/schemas/schemas.cjs.js b/dist/schemas/schemas.cjs.js
index 76f11280d2797a8466fd2f7373c12d4cd91f97ed..641c7f6db41b935101633f5107ae43bc398447c3 100644
--- a/dist/schemas/schemas.cjs.js
+++ b/dist/schemas/schemas.cjs.js
@@ -101,10 +101,7 @@ async function gatherDynamicPluginsSchemas(packages, logger, schemaLocator = ()
   for (const pluginPackage of packages) {
     let schemaLocation = schemaLocator(pluginPackage);
     if (!path__namespace.isAbsolute(schemaLocation)) {
-      let pluginLocation = url__namespace.fileURLToPath(pluginPackage.location);
-      if (path__namespace.basename(pluginLocation) === "alpha") {
-        pluginLocation = path__namespace.dirname(pluginLocation);
-      }
+      const pluginLocation = url__namespace.fileURLToPath(pluginPackage.location);
       schemaLocation = path__namespace.resolve(pluginLocation, schemaLocation);
     }
     if (!await fs__default.default.pathExists(schemaLocation)) {
diff --git a/dist/schemas/schemas.cjs.js.map b/dist/schemas/schemas.cjs.js.map
index c4d510278241c67e5c8b6c1a9da0f61d78e21903..3a42b91345f6adda3317008bba26e89f97e19726 100644
--- a/dist/schemas/schemas.cjs.js.map
+++ b/dist/schemas/schemas.cjs.js.map
@@ -1 +1 @@
-{"version":3,"file":"schemas.cjs.js","sources":["../../src/schemas/schemas.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ScannedPluginPackage } from '../scanner/types';\nimport {\n  coreServices,\n  createServiceFactory,\n  createServiceRef,\n} from '@backstage/backend-plugin-api';\nimport { findPaths } from '@backstage/cli-common';\n\nimport fs from 'fs-extra';\nimport * as path from 'path';\nimport * as url from 'url';\nimport { isEmpty } from 'lodash';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { JsonObject } from '@backstage/types';\nimport { PluginScanner } from '../scanner/plugin-scanner';\nimport { ConfigSchema, loadConfigSchema } from '@backstage/config-loader';\nimport { dynamicPluginsFeatureLoader } from '../features';\n\n/**\n *\n * @public\n * */\nexport interface DynamicPluginsSchemasService {\n  addDynamicPluginsSchemas(configSchema: ConfigSchema): Promise<{\n    schema: ConfigSchema;\n  }>;\n}\n\n/**\n * A service that provides the config schemas of scanned dynamic plugins.\n *\n * @public\n */\nexport const dynamicPluginsSchemasServiceRef =\n  createServiceRef<DynamicPluginsSchemasService>({\n    id: 'core.dynamicplugins.schemas',\n    scope: 'root',\n  });\n\n/**\n * @public\n */\nexport interface DynamicPluginsSchemasOptions {\n  /**\n   * Function that returns the path to the Json schema file for a given scanned plugin package.\n   * The path is either absolute, or relative to the plugin package root directory.\n   *\n   * Default behavior is to look for the `dist/configSchema.json` relative path.\n   *\n   * @param pluginPackage - The scanned plugin package.\n   * @returns the absolute or plugin-relative path to the Json schema file.\n   */\n  schemaLocator?: (pluginPackage: ScannedPluginPackage) => string;\n}\n\nconst dynamicPluginsSchemasServiceFactoryWithOptions = (\n  options?: DynamicPluginsSchemasOptions,\n) =>\n  createServiceFactory({\n    service: dynamicPluginsSchemasServiceRef,\n    deps: {\n      config: coreServices.rootConfig,\n    },\n    factory({ config }) {\n      let additionalSchemas: { [context: string]: JsonObject } | undefined;\n\n      return {\n        async addDynamicPluginsSchemas(configSchema: ConfigSchema): Promise<{\n          schema: ConfigSchema;\n        }> {\n          if (!additionalSchemas) {\n            const logger = {\n              ...console,\n              child() {\n                return this;\n              },\n            };\n\n            const scanner = PluginScanner.create({\n              config,\n              logger,\n              // eslint-disable-next-line no-restricted-syntax\n              backstageRoot: findPaths(__dirname).targetRoot,\n              preferAlpha: true,\n            });\n\n            const { packages } = await scanner.scanRoot();\n\n            additionalSchemas = await gatherDynamicPluginsSchemas(\n              packages,\n              logger,\n              options?.schemaLocator,\n            );\n          }\n\n          const serialized = configSchema.serialize();\n          if (serialized?.backstageConfigSchemaVersion !== 1) {\n            throw new Error(\n              'Serialized configuration schema is invalid or has an invalid version number',\n            );\n          }\n          const schemas = serialized.schemas as {\n            value: JsonObject;\n            path: string;\n          }[];\n\n          schemas.push(\n            ...Object.keys(additionalSchemas).map(context => {\n              return {\n                path: context,\n                value: additionalSchemas![context],\n              };\n            }),\n          );\n          serialized.schemas = schemas;\n          return {\n            schema: await loadConfigSchema({\n              serialized,\n            }),\n          };\n        },\n      };\n    },\n  });\n\n/**\n * @public\n * @deprecated Use {@link dynamicPluginsFeatureLoader} instead, which gathers all services and features required for dynamic plugins.\n */\nexport const dynamicPluginsSchemasServiceFactory = Object.assign(\n  dynamicPluginsSchemasServiceFactoryWithOptions,\n  dynamicPluginsSchemasServiceFactoryWithOptions(),\n);\n\n/** @internal */\nasync function gatherDynamicPluginsSchemas(\n  packages: ScannedPluginPackage[],\n  logger: LoggerService,\n  schemaLocator: (pluginPackage: ScannedPluginPackage) => string = () =>\n    path.join('dist', 'configSchema.json'),\n): Promise<{ [context: string]: JsonObject }> {\n  const allSchemas: { [context: string]: JsonObject } = {};\n\n  for (const pluginPackage of packages) {\n    let schemaLocation = schemaLocator(pluginPackage);\n\n    if (!path.isAbsolute(schemaLocation)) {\n      let pluginLocation = url.fileURLToPath(pluginPackage.location);\n      if (path.basename(pluginLocation) === 'alpha') {\n        pluginLocation = path.dirname(pluginLocation);\n      }\n      schemaLocation = path.resolve(pluginLocation, schemaLocation);\n    }\n\n    if (!(await fs.pathExists(schemaLocation))) {\n      continue;\n    }\n\n    const serialized = await fs.readJson(schemaLocation);\n    if (!serialized) {\n      continue;\n    }\n\n    if (isEmpty(serialized)) {\n      continue;\n    }\n\n    if (!serialized?.$schema || serialized?.type !== 'object') {\n      logger.error(\n        `Serialized configuration schema is invalid for plugin ${pluginPackage.manifest.name}`,\n      );\n      continue;\n    }\n\n    allSchemas[schemaLocation] = serialized;\n  }\n\n  return allSchemas;\n}\n"],"names":["createServiceRef","createServiceFactory","coreServices","PluginScanner","findPaths","loadConfigSchema","path","url","fs","isEmpty"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"schemas.cjs.js","sources":["../../src/schemas/schemas.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ScannedPluginPackage } from '../scanner/types';\nimport {\n  coreServices,\n  createServiceFactory,\n  createServiceRef,\n} from '@backstage/backend-plugin-api';\nimport { findPaths } from '@backstage/cli-common';\n\nimport fs from 'fs-extra';\nimport * as path from 'path';\nimport * as url from 'url';\nimport { isEmpty } from 'lodash';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { JsonObject } from '@backstage/types';\nimport { PluginScanner } from '../scanner/plugin-scanner';\nimport { ConfigSchema, loadConfigSchema } from '@backstage/config-loader';\nimport { dynamicPluginsFeatureLoader } from '../features';\n\n/**\n *\n * @public\n * */\nexport interface DynamicPluginsSchemasService {\n  addDynamicPluginsSchemas(configSchema: ConfigSchema): Promise<{\n    schema: ConfigSchema;\n  }>;\n}\n\n/**\n * A service that provides the config schemas of scanned dynamic plugins.\n *\n * @public\n */\nexport const dynamicPluginsSchemasServiceRef =\n  createServiceRef<DynamicPluginsSchemasService>({\n    id: 'core.dynamicplugins.schemas',\n    scope: 'root',\n  });\n\n/**\n * @public\n */\nexport interface DynamicPluginsSchemasOptions {\n  /**\n   * Function that returns the path to the Json schema file for a given scanned plugin package.\n   * The path is either absolute, or relative to the plugin package root directory.\n   *\n   * Default behavior is to look for the `dist/configSchema.json` relative path.\n   *\n   * @param pluginPackage - The scanned plugin package.\n   * @returns the absolute or plugin-relative path to the Json schema file.\n   */\n  schemaLocator?: (pluginPackage: ScannedPluginPackage) => string;\n}\n\nconst dynamicPluginsSchemasServiceFactoryWithOptions = (\n  options?: DynamicPluginsSchemasOptions,\n) =>\n  createServiceFactory({\n    service: dynamicPluginsSchemasServiceRef,\n    deps: {\n      config: coreServices.rootConfig,\n    },\n    factory({ config }) {\n      let additionalSchemas: { [context: string]: JsonObject } | undefined;\n\n      return {\n        async addDynamicPluginsSchemas(configSchema: ConfigSchema): Promise<{\n          schema: ConfigSchema;\n        }> {\n          if (!additionalSchemas) {\n            const logger = {\n              ...console,\n              child() {\n                return this;\n              },\n            };\n\n            const scanner = PluginScanner.create({\n              config,\n              logger,\n              // eslint-disable-next-line no-restricted-syntax\n              backstageRoot: findPaths(__dirname).targetRoot,\n              preferAlpha: true,\n            });\n\n            const { packages } = await scanner.scanRoot();\n\n            additionalSchemas = await gatherDynamicPluginsSchemas(\n              packages,\n              logger,\n              options?.schemaLocator,\n            );\n          }\n\n          const serialized = configSchema.serialize();\n          if (serialized?.backstageConfigSchemaVersion !== 1) {\n            throw new Error(\n              'Serialized configuration schema is invalid or has an invalid version number',\n            );\n          }\n          const schemas = serialized.schemas as {\n            value: JsonObject;\n            path: string;\n          }[];\n\n          schemas.push(\n            ...Object.keys(additionalSchemas).map(context => {\n              return {\n                path: context,\n                value: additionalSchemas![context],\n              };\n            }),\n          );\n          serialized.schemas = schemas;\n          return {\n            schema: await loadConfigSchema({\n              serialized,\n            }),\n          };\n        },\n      };\n    },\n  });\n\n/**\n * @public\n * @deprecated Use {@link dynamicPluginsFeatureLoader} instead, which gathers all services and features required for dynamic plugins.\n */\nexport const dynamicPluginsSchemasServiceFactory = Object.assign(\n  dynamicPluginsSchemasServiceFactoryWithOptions,\n  dynamicPluginsSchemasServiceFactoryWithOptions(),\n);\n\n/** @internal */\nasync function gatherDynamicPluginsSchemas(\n  packages: ScannedPluginPackage[],\n  logger: LoggerService,\n  schemaLocator: (pluginPackage: ScannedPluginPackage) => string = () =>\n    path.join('dist', 'configSchema.json'),\n): Promise<{ [context: string]: JsonObject }> {\n  const allSchemas: { [context: string]: JsonObject } = {};\n\n  for (const pluginPackage of packages) {\n    let schemaLocation = schemaLocator(pluginPackage);\n\n    if (!path.isAbsolute(schemaLocation)) {\n      const pluginLocation = url.fileURLToPath(pluginPackage.location);\n      schemaLocation = path.resolve(pluginLocation, schemaLocation);\n    }\n\n    if (!(await fs.pathExists(schemaLocation))) {\n      continue;\n    }\n\n    const serialized = await fs.readJson(schemaLocation);\n    if (!serialized) {\n      continue;\n    }\n\n    if (isEmpty(serialized)) {\n      continue;\n    }\n\n    if (!serialized?.$schema || serialized?.type !== 'object') {\n      logger.error(\n        `Serialized configuration schema is invalid for plugin ${pluginPackage.manifest.name}`,\n      );\n      continue;\n    }\n\n    allSchemas[schemaLocation] = serialized;\n  }\n\n  return allSchemas;\n}\n"],"names":["createServiceRef","createServiceFactory","coreServices","PluginScanner","findPaths","loadConfigSchema","path","url","fs","isEmpty"],"mappings":"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"}
\ No newline at end of file
